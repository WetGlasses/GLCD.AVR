/*
 * GLCD.h
 *
 * Created: 8/2/2016 12:29:53 PM
 *  Author: ASUS
 */ 


#ifndef GLCD_H_
#define GLCD_H_

#include <avr/pgmspace.h>

#define	Data_Port	PORTF
#define	Data_Port_1	PORTA

#define	Data_Direction		DDRF
#define	Data_Direction_1	DDRA
#define	Control_Direction	DDRE


#define  RD_Port	PORTE
#define  RD_Pin		PE2

#define  WR_Port	PORTE
#define  WR_Pin		PE3

#define  RS_Port	PORTE
#define  RS_Pin		PE4

#define  Reset_Port	PORTE
#define  Reset_Pin	PE5

#define  CS_Port	PORTE
#define  CS_Pin		PE6

char Present_page =0x01;			// Global Variable for position
char Present_Col = 0x10;


const char foot_print[] PROGMEM =
{
	0x00, 0x00, 0x00, 0x00, 0x84, 0x80, 0xC0, 0xE0, 0xE0, 0xF8, 0xDE, 0x7F, 0xEF, 0xFF, 0x7F, 0x3F,
	0x1F, 0x1F, 0x0F, 0x07, 0x03, 0x03, 0x03, 0x07, 0x07, 0x0F, 0x1F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xEF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7E, 0xFE, 0xFC, 0xF0, 0xC0, 0x00,
	0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x10, 0xF0, 0xF0, 0xF0, 0x80, 0xF0, 0xF0, 0xF0, 0x00, 0xE0, 0x70, 0x00, 0xF0, 0xF0, 0xF0,
	0x00, 0xF0, 0xF0, 0xF0, 0x00, 0x10, 0xF0, 0xF0, 0xF0, 0x80, 0x70, 0x10, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x80, 0xC0, 0xE0, 0x1F, 0xF7, 0xFF, 0xFF, 0xFF, 0xFF, 0xDF, 0x03, 0x27, 0x11, 0x00, 0x08,
	0x00, 0x00, 0x00, 0x08, 0x01, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x02, 0x19, 0x0F, 0x1F, 0x3F,
	0x3F, 0x3F, 0x7F, 0x7F, 0x7F, 0x7F, 0x3F, 0x7F, 0x3F, 0x7F, 0x3F, 0x3F, 0x3F, 0x7F, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFD, 0xFF, 0xFF, 0xFF, 0xFC,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x07, 0x0F, 0x0F, 0x03, 0x07, 0x0F, 0x0F, 0x03, 0x00, 0x00, 0x0F, 0x0F, 0x0F,
	0x06, 0x07, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

	0x00, 0x01, 0x09, 0x95, 0xE7, 0x0E, 0x0F, 0xFF, 0x3F, 0x3F, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x40, 0x0D, 0x40, 0x00, 0x00, 0x00, 0x00, 0x20,
	0x00, 0x20, 0x20, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x1F,
	0x1F, 0x6F, 0x7F, 0x8F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x47,
	0x00, 0x40, 0x80, 0x00, 0x04, 0x3C, 0xFC, 0xFC, 0xF8, 0x0C, 0x00, 0x70, 0xFC, 0xFC, 0x1E, 0x1E,
	0xFC, 0xF8, 0x00, 0xFC, 0xFC, 0xFC, 0x00, 0xFC, 0xFC, 0xFC, 0x00, 0x00, 0x00, 0xFC, 0x7C, 0xFC,
	0xFC, 0xF0, 0x00, 0xFC, 0xFE, 0xFE, 0x8E, 0xDC, 0x7C, 0x38, 0xFC, 0xFC, 0xFC, 0xFC, 0x5C, 0x1C,
	0x00, 0x00, 0x18, 0x3C, 0x7E, 0xFE, 0x9E, 0x00, 0xF8, 0xFC, 0x1E, 0x1E, 0xFC, 0xFC, 0x70, 0x00,
	0x00, 0x08, 0x18, 0x42, 0x03, 0x0D, 0x99, 0x01, 0x02, 0x07, 0x00, 0x00, 0x00, 0x00, 0x02, 0x26,
	0x3F, 0x7E, 0xFF, 0xBF, 0x3E, 0x7C, 0x78, 0x78, 0x60, 0x60, 0xC0, 0xC0, 0x80, 0x00, 0x00, 0x01,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x80, 0xC0, 0xE0, 0xE0, 0xE0, 0xF0, 0xF1, 0xE0, 0xE0,
	0x20, 0x18, 0x1E, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x08, 0x40,
	0x00, 0x10, 0x09, 0x00, 0x00, 0x00, 0x03, 0x03, 0x83, 0x80, 0x80, 0x80, 0x81, 0x83, 0x83, 0x83,
	0x81, 0x81, 0x80, 0x80, 0x81, 0x83, 0x83, 0x83, 0x83, 0x01, 0x00, 0x80, 0x83, 0x81, 0x03, 0x01,
	0x83, 0x83, 0x82, 0x83, 0x83, 0x03, 0x81, 0x83, 0x83, 0x00, 0x03, 0x83, 0x83, 0x03, 0x83, 0x81,
	0x80, 0x80, 0x80, 0x03, 0x03, 0x03, 0x01, 0x00, 0x01, 0x01, 0x03, 0x03, 0x03, 0x01, 0x00, 0x00,

	0xF0, 0xF0, 0xF0, 0xF8, 0xF8, 0xFC, 0xFE, 0xFF, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x05,
	0x05, 0x07, 0x23, 0x07, 0x0F, 0x0F, 0x1E, 0x1E, 0x1F, 0x0F, 0x0F, 0x07, 0x07, 0x03, 0x00, 0x00,
	0x00, 0x00, 0x04, 0x0E, 0x0E, 0x3D, 0x1D, 0x19, 0x3B, 0x3B, 0x3D, 0x3F, 0x3F, 0x0F, 0x0F, 0x03,
	0x00, 0xC0, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0xBF, 0xCB, 0x3F, 0x9F, 0xFF, 0x31, 0x07, 0xFB, 0x14,
	0x20, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x4F, 0x7F, 0x7F, 0x03, 0x03, 0x7F, 0x7F,
	0x5F, 0x4B, 0x23, 0x0F, 0x7F, 0x7F, 0x7F, 0x33, 0xFF, 0x4F, 0x00, 0x7F, 0x7F, 0x7F, 0x00, 0x3F,
	0x7F, 0x63, 0x63, 0x7F, 0x3F, 0x1E, 0x1F, 0x3F, 0x7F, 0x60, 0x40, 0x7F, 0x7F, 0x00, 0x07, 0x4F,
	0x7F, 0x7B, 0x03, 0x00, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3C, 0xF0, 0xE2, 0x8E, 0x20,
	0xA0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x40, 0x20, 0x90, 0xC0, 0xF0,
	0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFC, 0xFD, 0xF8, 0xF8, 0xF8, 0xF0,
	0xF0, 0xF0, 0xF0, 0x00, 0x00, 0x00, 0xE0, 0xF0, 0xF0, 0xF0, 0x70, 0x70, 0xF0, 0xF0, 0xF0, 0x00,
	0xF0, 0xF0, 0xF0, 0x00, 0x80, 0xF0, 0xF0, 0xF0, 0xE0, 0x00, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xE0,
	0xC0, 0x00, 0xF0, 0xF0, 0xF0, 0xC0, 0xC0, 0xE0, 0xF0, 0xF0, 0x00, 0x00, 0xF0, 0xF0, 0xF0, 0xE0,
	0x00, 0xF0, 0xF0, 0xF0, 0xE0, 0xC0, 0xF0, 0xF0, 0x70, 0x70, 0xF0, 0xF0, 0x60, 0x00, 0x00, 0x00,

	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x03, 0x00, 0x00, 0x00, 0x01, 0x1F, 0x3E,
	0xF8, 0xE1, 0x86, 0x06, 0x0E, 0x0E, 0x0C, 0x1E, 0x1C, 0x3C, 0x38, 0x38, 0x78, 0x38, 0x38, 0x38,
	0x78, 0xD8, 0x18, 0x98, 0xCC, 0xEC, 0xE6, 0xF6, 0x7B, 0x79, 0x3C, 0x1E, 0x1E, 0x0F, 0x07, 0x07,
	0x07, 0x0F, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x19, 0x1F, 0x0E, 0x00, 0x00, 0x0F, 0x0F, 0x07, 0x06,
	0x0F, 0x0F, 0x0F, 0x08, 0x0F, 0x0B, 0x0B, 0x0F, 0x0F, 0x08, 0x00, 0x1F, 0x1F, 0x1B, 0x08, 0x0F,
	0x07, 0x00, 0x0F, 0x0F, 0x07, 0x0F, 0x0F, 0x07, 0x0F, 0x0F, 0x08, 0x0F, 0x0F, 0x0B, 0x0F, 0x0F,
	0x0E, 0x00, 0x0F, 0x01, 0x03, 0x07, 0x0F, 0x0F, 0x00, 0x0A, 0x1B, 0x01, 0x00, 0x00, 0x00, 0x00,
	0xFF, 0xFF, 0xFF, 0xBF, 0xFF, 0xCF, 0xC7, 0xE3, 0xE0, 0xE0, 0xF0, 0xF0, 0xF0, 0xF8, 0xF8, 0xF8,
	0xFC, 0xFC, 0xFF, 0xFF, 0xFE, 0xFC, 0xFC, 0xF8, 0xF8, 0x30, 0xF0, 0xF0, 0x30, 0xF8, 0xF8, 0xF8,
	0xFC, 0xFE, 0xFF, 0xFF, 0xFF, 0xFD, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8,
	0xF8, 0xF8, 0xF8, 0xF0, 0xF3, 0xF7, 0xFF, 0xEF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

const char ra_logo[] PROGMEM =
{
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x80, 0x80, 0x80, 0x00, 0x80, 0x80, 0x80, 0x00, 0x80, 0x80, 0x00, 0x00, 0xC0, 0xC0,
0x00, 0xC0, 0xC0, 0xC0, 0x00, 0xC0, 0xE0, 0xE0, 0x00, 0xE0, 0xE0, 0x00, 0xE0, 0xE0, 0xE0, 0x80,
0xE0, 0xF0, 0xF0, 0x80, 0xF0, 0xF0, 0xC0, 0xC0, 0xF0, 0xF0, 0xC0, 0x70, 0x38, 0x38, 0x40, 0xF8,
0xF8, 0xF8, 0xE0, 0xF8, 0xF8, 0xF8, 0xF8, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x30, 0xF0, 0x80, 0xC0,
0xF0, 0xF0, 0x80, 0xC0, 0xF0, 0x10, 0x00, 0xF0, 0xF0, 0x80, 0x80, 0xF0, 0xF0, 0x00, 0xC0, 0xF0,
0xB0, 0xB0, 0xB0, 0x30, 0x00, 0xF0, 0xF0, 0xB0, 0xF0, 0xF0, 0x00, 0xF0, 0xF0, 0xB0, 0xB0, 0xB0,
0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x38, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xF8, 0xFE, 0xFF, 0xFF, 0xF8, 0xFF, 0x7F, 0x3F, 0x38, 0x1F,
0x1F, 0x8C, 0x8F, 0x8F, 0xCF, 0xCC, 0xCF, 0xCF, 0xCF, 0xCC, 0xC7, 0xC7, 0xC7, 0xC6, 0xC7, 0xE7,
0xE6, 0xE7, 0xE7, 0xE7, 0xE7, 0xE3, 0xE3, 0xE3, 0xE3, 0xF3, 0xF3, 0xF3, 0xF3, 0xF3, 0xF3, 0xF3,
0xF1, 0xF1, 0xF1, 0xF1, 0xF9, 0xF9, 0xF9, 0xF9, 0xF9, 0xF9, 0xF9, 0xF0, 0xE0, 0xE0, 0xF0, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07,
0x00, 0x07, 0x07, 0x07, 0x01, 0x00, 0x04, 0x07, 0x07, 0x00, 0x00, 0x07, 0x07, 0x00, 0x07, 0x07,
0x06, 0x06, 0x06, 0x00, 0x04, 0x07, 0x00, 0x01, 0x07, 0x06, 0x00, 0x07, 0x07, 0x06, 0x06, 0x06,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x1F, 0x01, 0x00, 0xF0, 0xFC, 0xFE,
0xFF, 0xFF, 0x3F, 0x1F, 0x0F, 0x07, 0x07, 0x03, 0x83, 0x83, 0x83, 0x03, 0x03, 0x07, 0x07, 0x0F,
0x1F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F,
0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x7F, 0x7F, 0x00, 0x60,
0x7F, 0x67, 0x61, 0x23, 0x3F, 0x1E, 0x00, 0x7F, 0x7F, 0x6D, 0x6D, 0x6D, 0x40, 0x70, 0x3C, 0x1F,
0x1B, 0x1F, 0x7C, 0x60, 0x00, 0x67, 0x6F, 0x79, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x0F, 0x0F, 0x1F, 0x1F, 0x3F, 0x7F, 0xFF, 0xFF, 0xFC, 0xE0, 0x00, 0x08, 0xFF, 0xFF, 0xFF,
0xCF, 0xC0, 0xC0, 0xC0, 0x80, 0xF8, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0x00, 0x00,
0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0x03, 0x01, 0x01, 0x1F, 0x07, 0x01, 0x81,
0xC0, 0xC0, 0xFF, 0xFF, 0xFF, 0x87, 0x83, 0x81, 0x80, 0xE0, 0xF0, 0xF8, 0xF8, 0xF8, 0xF8, 0xF0,
0xE0, 0x00, 0x00, 0x01, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x10, 0x10, 0xF0, 0xF0,
0x10, 0x10, 0xF0, 0xF0, 0x00, 0x00, 0x00, 0xF0, 0xF0, 0x00, 0xF0, 0xF0, 0x90, 0xF0, 0x70, 0x20,
0xF0, 0xF0, 0x70, 0xE0, 0x80, 0xF0, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x3F, 0x0F, 0x07, 0x01, 0x00, 0x80,
0xE0, 0xF0, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0xFC, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x1F, 0x0F, 0x07, 0x07, 0x83, 0xC3, 0xE1, 0xF1, 0xF1, 0xF0, 0xF0,
0xF8, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFF, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03,
0x00, 0x00, 0x01, 0x03, 0x02, 0x02, 0x03, 0x03, 0x00, 0x00, 0x03, 0x03, 0x00, 0x03, 0x02, 0x00,
0x83, 0x83, 0x00, 0x01, 0x03, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0xE0, 0x70, 0x30, 0x38, 0x3C, 0x7E, 0xFF, 0xFF, 0x7F, 0x0F, 0x00, 0x00, 0xFF, 0xFF,
0xFF, 0x3F, 0x1F, 0x0F, 0x07, 0x03, 0x03, 0x01, 0x40, 0x60, 0x70, 0x78, 0x7C, 0x7E, 0x7F, 0x3F,
0x3F, 0x3F, 0x3F, 0x3F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0xC0, 0x80, 0x00, 0x00, 0x03, 0x0F, 0x0F, 0x1F, 0x0F, 0x0F, 0x87,
0xC1, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x3F, 0x3F, 0x00, 0x30,
0x3F, 0x03, 0x0F, 0x3C, 0x3F, 0x3F, 0x00, 0x01, 0x01, 0x3F, 0x3F, 0x01, 0x01, 0x1E, 0x3F, 0x33,
0x21, 0x21, 0x33, 0x1F, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

0x00, 0x00, 0x00, 0xFC, 0xF8, 0xF0, 0xF8, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFF, 0xFF, 0xFF,
0xFF, 0xF0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF8, 0xF8,
0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0xF8, 0xFC, 0xFC, 0xFC, 0xFF, 0xFF,
0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFE, 0x3E, 0xFE, 0xFE, 0xFE, 0x3E, 0xFF, 0xFF,
0xFF, 0x3F, 0xFF, 0xFF, 0x1F, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0x38, 0x00, 0xF8, 0xF8, 0x58, 0x58,
0x78, 0x30, 0xF8, 0xF8, 0x18, 0xD8, 0xF8, 0x70, 0x00, 0xF0, 0xF0, 0x18, 0x18, 0x18, 0xF0, 0xF0,
0x00, 0xF8, 0xF8, 0x18, 0x18, 0xB8, 0xF0, 0xE0, 0x80, 0xF8, 0xF8, 0x00, 0x00, 0xF8, 0xF8, 0x00,
0xF0, 0xF0, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0xF8, 0xF8, 0x18, 0x18, 0x30, 0x78, 0xD8, 0xD8,
0x00, 0x00, 0x00, 0x1F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x07, 0x3F, 0x3F, 0x3F, 0x07, 0x3F, 0x3F,
0x07, 0x07, 0x3F, 0x1F, 0x03, 0x1F, 0x1F, 0x1F, 0x03, 0x1F, 0x1F, 0x1F, 0x01, 0x1F, 0x0F, 0x01,
0x0F, 0x0F, 0x0F, 0x01, 0x0F, 0x0F, 0x0F, 0x00, 0x0F, 0x07, 0x04, 0x00, 0x07, 0x07, 0x00, 0x07,
0x07, 0x03, 0x00, 0x03, 0x03, 0x03, 0x00, 0x03, 0x03, 0x00, 0x00, 0x03, 0x01, 0x00, 0x01, 0x01,
0x01, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x00, 0x00,
0x00, 0x00, 0x03, 0x03, 0x00, 0x01, 0x03, 0x02, 0x00, 0x01, 0x03, 0x03, 0x02, 0x03, 0x03, 0x01,
0x00, 0x03, 0x03, 0x03, 0x03, 0x03, 0x01, 0x00, 0x01, 0x03, 0x03, 0x02, 0x03, 0x03, 0x01, 0x00,
0x01, 0x03, 0x03, 0x02, 0x03, 0x00, 0x00, 0x00, 0x03, 0x03, 0x00, 0x00, 0x03, 0x02, 0x03, 0x03

};

const char Font[] PROGMEM = 
{
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char
	0x5F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char !
	0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00,  // Code for char "
	0x10, 0x74, 0x1C, 0x77, 0x1C, 0x17, 0x04,  // Code for char #
	0x26, 0x49, 0x7F, 0x49, 0x3A, 0x00, 0x00,  // Code for char $
	0x47, 0x25, 0x17, 0x08, 0x74, 0x52, 0x71,  // Code for char %
	0x30, 0x4E, 0x49, 0x75, 0x26, 0x50, 0x48,  // Code for char &
	0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char '
	0x3E, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char (
	0x41, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char )
	0x42, 0x24, 0x18, 0x7E, 0x18, 0x24, 0x42,  // Code for char *
	0x08, 0x08, 0x3E, 0x08, 0x08, 0x00, 0x00,  // Code for char +
	0x58, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char ,
	0x08, 0x08, 0x08, 0x08, 0x00, 0x00, 0x00,  // Code for char -
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char .
	0x60, 0x18, 0x06, 0x00, 0x00, 0x00, 0x00,  // Code for char /
	0x3E, 0x41, 0x41, 0x3E, 0x00, 0x00, 0x00,  // Code for char 0
	0x42, 0x7F, 0x40, 0x00, 0x00, 0x00, 0x00,  // Code for char 1
	0x66, 0x51, 0x49, 0x66, 0x00, 0x00, 0x00,  // Code for char 2
	0x22, 0x49, 0x49, 0x36, 0x00, 0x00, 0x00,  // Code for char 3
	0x18, 0x14, 0x52, 0x7F, 0x50, 0x00, 0x00,  // Code for char 4
	0x6F, 0x49, 0x49, 0x31, 0x00, 0x00, 0x00,  // Code for char 5
	0x3E, 0x49, 0x49, 0x32, 0x00, 0x00, 0x00,  // Code for char 6
	0x43, 0x71, 0x4D, 0x03, 0x00, 0x00, 0x00,  // Code for char 7
	0x36, 0x49, 0x49, 0x36, 0x00, 0x00, 0x00,  // Code for char 8
	0x26, 0x49, 0x49, 0x3E, 0x00, 0x00, 0x00,  // Code for char 9
	0x66, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char :
	0x56, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char ;
	0x08, 0x14, 0x22, 0x00, 0x00, 0x00, 0x00,  // Code for char <
	0x14, 0x14, 0x14, 0x14, 0x00, 0x00, 0x00,  // Code for char =
	0x22, 0x14, 0x08, 0x00, 0x00, 0x00, 0x00,  // Code for char >
	0x02, 0x59, 0x09, 0x06, 0x00, 0x00, 0x00,  // Code for char ?
	0x1C, 0x22, 0x5D, 0x55, 0x5D, 0x51, 0x2E,  // Code for char @
	0x40, 0x7E, 0x49, 0x09, 0x49, 0x7E, 0x40,  // Code for char A
	0x41, 0x7F, 0x49, 0x49, 0x36, 0x00, 0x00,  // Code for char B
	0x3E, 0x41, 0x41, 0x42, 0x27, 0x00, 0x00,  // Code for char C
	0x41, 0x7F, 0x41, 0x41, 0x41, 0x3E, 0x00,  // Code for char D
	0x41, 0x7F, 0x49, 0x49, 0x49, 0x41, 0x63,  // Code for char E
	0x41, 0x7F, 0x49, 0x09, 0x09, 0x03, 0x00,  // Code for char F
	0x3E, 0x41, 0x41, 0x51, 0x52, 0x37, 0x00,  // Code for char G
	0x41, 0x7F, 0x49, 0x08, 0x49, 0x7F, 0x41,  // Code for char H
	0x41, 0x7F, 0x41, 0x00, 0x00, 0x00, 0x00,  // Code for char I
	0x30, 0x40, 0x41, 0x3F, 0x01, 0x00, 0x00,  // Code for char J
	0x41, 0x7F, 0x49, 0x14, 0x63, 0x41, 0x00,  // Code for char K
	0x41, 0x7F, 0x41, 0x40, 0x40, 0x70, 0x00,  // Code for char L
	0x41, 0x7F, 0x42, 0x04, 0x42, 0x7F, 0x41,  // Code for char M
	0x41, 0x7F, 0x43, 0x1C, 0x60, 0x7F, 0x41,  // Code for char N
	0x3E, 0x41, 0x41, 0x41, 0x3E, 0x00, 0x00,  // Code for char O
	0x41, 0x7F, 0x49, 0x09, 0x06, 0x00, 0x00,  // Code for char P
	0x3E, 0x41, 0x41, 0x51, 0x21, 0x5E, 0x00,  // Code for char Q
	0x41, 0x7F, 0x49, 0x19, 0x69, 0x46, 0x40,  // Code for char R
	0x32, 0x65, 0x49, 0x49, 0x53, 0x26, 0x00,  // Code for char S
	0x03, 0x41, 0x7F, 0x41, 0x03, 0x00, 0x00,  // Code for char T
	0x01, 0x3F, 0x41, 0x40, 0x41, 0x3F, 0x01,  // Code for char U
	0x01, 0x07, 0x19, 0x60, 0x19, 0x07, 0x01,  // Code for char V
	0x3F, 0x40, 0x30, 0x08, 0x30, 0x40, 0x3F,  // Code for char W
	0x41, 0x63, 0x55, 0x08, 0x55, 0x63, 0x41,  // Code for char X
	0x01, 0x03, 0x4D, 0x70, 0x4D, 0x03, 0x01,  // Code for char Y
	0x63, 0x51, 0x49, 0x45, 0x63, 0x00, 0x00,  // Code for char Z
	0x7F, 0x41, 0x41, 0x00, 0x00, 0x00, 0x00,  // Code for char [
	0x06, 0x18, 0x60, 0x00, 0x00, 0x00, 0x00,  // Code for char BackSlash
	0x41, 0x41, 0x7F, 0x00, 0x00, 0x00, 0x00,  // Code for char ]
	0x06, 0x01, 0x06, 0x00, 0x00, 0x00, 0x00,  // Code for char ^
	0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x00,  // Code for char _
	0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char `
	0x64, 0x54, 0x54, 0x78, 0x40, 0x00, 0x00,  // Code for char a
	0x41, 0x7F, 0x48, 0x48, 0x30, 0x00, 0x00,  // Code for char b
	0x38, 0x44, 0x44, 0x2C, 0x00, 0x00, 0x00,  // Code for char c
	0x30, 0x48, 0x49, 0x7F, 0x40, 0x00, 0x00,  // Code for char d
	0x38, 0x54, 0x54, 0x58, 0x00, 0x00, 0x00,  // Code for char e
	0x48, 0x7F, 0x49, 0x03, 0x00, 0x00, 0x00,  // Code for char f
	0x26, 0x49, 0x49, 0x3F, 0x01, 0x00, 0x00,  // Code for char g
	0x41, 0x7F, 0x48, 0x08, 0x78, 0x40, 0x00,  // Code for char h
	0x44, 0x7D, 0x40, 0x00, 0x00, 0x00, 0x00,  // Code for char i
	0x60, 0x44, 0x7D, 0x00, 0x00, 0x00, 0x00,  // Code for char j
	0x41, 0x7F, 0x50, 0x2C, 0x42, 0x42, 0x00,  // Code for char k
	0x41, 0x7F, 0x40, 0x00, 0x00, 0x00, 0x00,  // Code for char l
	0x04, 0x78, 0x04, 0x78, 0x04, 0x78, 0x40,  // Code for char m
	0x04, 0x78, 0x04, 0x04, 0x78, 0x40, 0x00,  // Code for char n
	0x38, 0x44, 0x44, 0x38, 0x00, 0x00, 0x00,  // Code for char o
	0x42, 0x7E, 0x52, 0x12, 0x0C, 0x00, 0x00,  // Code for char p
	0x0C, 0x12, 0x52, 0x7E, 0x42, 0x00, 0x00,  // Code for char q
	0x44, 0x7C, 0x48, 0x04, 0x04, 0x00, 0x00,  // Code for char r
	0x48, 0x54, 0x24, 0x00, 0x00, 0x00, 0x00,  // Code for char s
	0x04, 0x7F, 0x44, 0x00, 0x00, 0x00, 0x00,  // Code for char t
	0x04, 0x3C, 0x40, 0x44, 0x3C, 0x40, 0x00,  // Code for char u
	0x04, 0x1C, 0x64, 0x60, 0x1C, 0x04, 0x00,  // Code for char v
	0x3C, 0x40, 0x30, 0x0C, 0x30, 0x40, 0x3C,  // Code for char w
	0x44, 0x6C, 0x10, 0x10, 0x6C, 0x44, 0x00,  // Code for char x
	0x02, 0x4E, 0x70, 0x0E, 0x02, 0x00, 0x00,  // Code for char y
	0x4C, 0x64, 0x54, 0x4C, 0x64, 0x00, 0x00,  // Code for char z
	0x08, 0x77, 0x41, 0x00, 0x00, 0x00, 0x00,  // Code for char {
	0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char |
	0x41, 0x77, 0x08, 0x00, 0x00, 0x00, 0x00,  // Code for char }
	0x18, 0x08, 0x08, 0x10, 0x10, 0x18, 0x00,  // Code for char ~
	0x7F, 0x41, 0x7F, 0x00, 0x00, 0x00, 0x00   // Code for char 
};

void GLCD_initialize();
void GLCD_Send_Command(char command);
void GLCD_Send_Data(char data);


void GLCD_ClearScreen();
void GLCD_goto(unsigned char page,unsigned char col);

void WriteString(char string[], char length, char page, char column, bool invert, bool para);
void Write2XString(char string[], char length, char page, char column, bool invert , bool para);

void WritePattern(const char Pattern[], char height, char breadth , bool invert);

void GLCD_initialize()
{
	Data_Direction = 0x9F;
	Data_Direction_1 = 0xFF;
	Control_Direction = 0xFF;
	
	Reset_Port |= (1<< Reset_Pin);
	Reset_Port &= ~(1<< Reset_Pin);
	asm volatile ("nop");
	Reset_Port |= (1<< Reset_Pin);
	_delay_ms(10);
	
	GLCD_Send_Command(0xaf);            // display on
	GLCD_Send_Command(0x40);            // display start line=0
	GLCD_Send_Command(0xa0);            // ADC=0
	GLCD_Send_Command(0xa6);            // normal display
	GLCD_Send_Command(0xa4);            // Duisplay all point = off
	GLCD_Send_Command(0xa2);            // LCD bias = 1/9
	GLCD_Send_Command(0xc8);            // Common output mode select= reverse
	GLCD_Send_Command(0x2f);            // Power control = all on

	GLCD_Send_Command(0x25);			// set the Rab ratio to middle
	GLCD_Send_Command(0x81);            // E-Vol setting
	GLCD_Send_Command(0x20);			 // (2byte command)
		
}


void GLCD_Send_Command(char command)
{
	RS_Port &= ~(1<< RS_Pin);			//	Control	
	WR_Port |= (1<< WR_Pin);
	RD_Port |= (1<< RD_Pin);
	
	Data_Port = (command & 0x9F);
	Data_Port_1= (command & 0b00100000)| ((command & 0b01000000)>>2);
	
	CS_Port &= ~(1<< CS_Pin);
	WR_Port &= ~(1<< WR_Pin);
	
	asm volatile ("nop");
	asm volatile ("nop");
	asm volatile ("nop");
	asm volatile ("nop");
	
	WR_Port |= (1<< WR_Pin);
	CS_Port |= (1<< CS_Pin);
}


void GLCD_Send_Data(char data)
{
	RS_Port |= (1<< RS_Pin);			//	Control
	WR_Port |= (1<< WR_Pin);
	RD_Port |= (1<< RD_Pin);
	
	Data_Port = (data & 0x9F);
	Data_Port_1= (data & 0b00100000)| ((data & 0b01000000)>>2);
	
	CS_Port &= ~(1<< CS_Pin);
	WR_Port &= ~(1<< WR_Pin);
	
	asm volatile ("nop");
	asm volatile ("nop");
	asm volatile ("nop");
	asm volatile ("nop");
	
	WR_Port |= (1<< WR_Pin);
	CS_Port |= (1<< CS_Pin);
}
void GLCD_ClearScreen()
{
	uint16_t i, j;
	for(i=0;i<8;i++)
	{
		GLCD_Send_Command(0xb0 | i);	// select page 0~7
		GLCD_Send_Command(0x10);	    // start form column 4
		GLCD_Send_Command(0x00);	    // (2byte command)
		for(j=0;j<128;j++)
		{
			GLCD_Send_Data(0x00);
		}
	}
}


void GLCD_goto(unsigned char page,unsigned char col)
{
	GLCD_Send_Command(0xb0|page); //page 0
	GLCD_Send_Command(0x10 | (col >> 4) );	    // start form column 4
	GLCD_Send_Command(0x00 | (col& 0x0F) );	    // (2byte command)
}


void WritePattern(const char pattern[], char height, char breadth, bool invert)
{
	uint16_t i, j;
	for(i=0;i<height;i++)
	{
		GLCD_Send_Command(0xb0 | i);	// select page 0~7
		GLCD_Send_Command(0x10);	    // start form column 4
		GLCD_Send_Command(0x00);	    // (2byte command)
		for(j=0;j<breadth;j++)
		{
			if (invert==true)
			{
				GLCD_Send_Data(~pgm_read_byte(&pattern[breadth*i+j]));
			}
			else
			{
				GLCD_Send_Data(pgm_read_byte(&pattern[breadth*i+j]));
			}
		}
	}
}


void WriteString(char string[], char length, char page, char column, bool invert , bool para)
{
	GLCD_goto(page,column);	
	char given_column = column;
	for (char x = 0;x<length;x++)
	{	
		if (column>=120)
		{
			page++;
			if (para == false)
			{
				column=0;
			} 
			else
			{
				column = given_column;
			}
			GLCD_goto(page,column);
		}
		
		for (char y = 0;y<7;y++)
		{
			if ((pgm_read_byte(&Font[(string[x]-0x20)*7 + y]) != 0x00) | (string[x]== 0x20))
			{
				if (invert==true)
				{
					GLCD_Send_Data(~pgm_read_byte(&Font[(string[x]-0x20)*7 + y]));
				}
				else
				{
					GLCD_Send_Data(pgm_read_byte(&Font[(string[x]-0x20)*7 + y]));
				}
				column++;
			} 
			else
			{
				break;
			}
		}
		if (invert==true)
		{
			GLCD_Send_Data(0xFF);
			column++;
		}
		else
		{
			GLCD_Send_Data(0x00);
			column++;
		}
	}
}

void Write2XString( char string[], char length, char page, char column, bool invert, bool para)
{
	char Double_Font[28];
	
	/*
		1st 14:	1st page
		2nd 14:	2nd page
	*/
	
	char Y, Given_column;
	Given_column= column;
	
	for (char X=0;X<length;X++)
	{
		if (column>=114)
		{
			page+=2;
			if (para == false)
			{
				column=0;
			}
			else
			{
				column = Given_column;
			}
		}
		for (Y = 0;Y<28;Y++)
		{
			Double_Font[Y]=0x00;
		}
			
		for (Y =0; Y<7; Y++)
		{
			Double_Font[2*Y] = pgm_read_byte(&Font[(string[X]-0x20)*7 + Y]);
			Double_Font[2*Y+1] = pgm_read_byte(&Font[(string[X]-0x20)*7 + Y]);
		}
		
		for (Y =0; Y<14; Y++)
		{
			Double_Font[14+Y] = ((Double_Font[Y] & 0b10000000)) | ((Double_Font[Y] & 0b10000000)>>1) |  ((Double_Font[Y] & 0b01000000)>>1) | ((Double_Font[Y] & 0b01000000)>>2) |  ((Double_Font[Y] & 0b00100000)>>2) | ((Double_Font[Y] & 0b00100000)>>3) |  ((Double_Font[Y] & 0b00010000)>>3) | ((Double_Font[Y] & 0b00010000)>>4);
			Double_Font[Y] = ((Double_Font[Y] & 0b00001000))<<4 | ((Double_Font[Y] & 0b00001000)<<3) |  ((Double_Font[Y] & 0b00000100)<<3) | ((Double_Font[Y] & 0b00000100)<<2) |  ((Double_Font[Y] & 0b00000010)<<2) | ((Double_Font[Y] & 0b00000010)<<1) |  ((Double_Font[Y] & 0b00000001)<<1) | ((Double_Font[Y] & 0b00000001));
		}
	
		for (Y =0; Y<14; Y++)
		{
				GLCD_Send_Command(0xb0 | page);					// select page 0~7
				GLCD_Send_Command(0x10 | (column >> 4) );	    // start form column 4
				GLCD_Send_Command(0x00 | (column & 0x0F));	    // (2byte command)
				
				if ((!((Double_Font[Y] == 0x00)&(Double_Font[14+Y] == 0x00)))| (string[X]== 0x20))
				{
					if (invert==true)
					{
						GLCD_Send_Data(~Double_Font[Y]);
					}
					else
					{
						GLCD_Send_Data(Double_Font[Y]);
					}
					
					
					/////////////////////////////	1st Line	//////////////////////////////////////////
					
					GLCD_Send_Command(0xb0 | (page+1));					// select page 0~7
					GLCD_Send_Command(0x10 | (column >> 4) );	    // start form column 4
					GLCD_Send_Command(0x00 | (column & 0x0F));	    // (2byte command)
					
					
					if (invert==true)
					{
						GLCD_Send_Data(~Double_Font[14+Y]);
					}
					else
					{
						GLCD_Send_Data(Double_Font[14+Y]);
					}
					column++;
				} 
				else
				{
					break;
				}
		}
		
		if (invert==true)
		{
			GLCD_Send_Command(0xb0 | page);					// select page 0~7
			GLCD_Send_Command(0x10 | (column >> 4) );	    // start form column 4
			GLCD_Send_Command(0x00 | (column & 0x0F));	    // (2byte command)
			GLCD_Send_Data(0xFF);
			
			GLCD_Send_Command(0xb0 | (page+1));					// select page 0~7
			GLCD_Send_Command(0x10 | (column >> 4) );	    // start form column 4
			GLCD_Send_Command(0x00 | (column & 0x0F));	    // (2byte command)
			GLCD_Send_Data(0xFF);
			column++;
		}
		else
		{
			GLCD_Send_Command(0xb0 | page);					// select page 0~7
			GLCD_Send_Command(0x10 | (column >> 4) );	    // start form column 4
			GLCD_Send_Command(0x00 | (column & 0x0F));	    // (2byte command)
			GLCD_Send_Data(0x00);
			
			GLCD_Send_Command(0xb0 | (page+1));					// select page 0~7
			GLCD_Send_Command(0x10 | (column >> 4) );	    // start form column 4
			GLCD_Send_Command(0x00 | (column & 0x0F));	    // (2byte command)
			GLCD_Send_Data(0x00);
			column++;
		}
	}
}

#endif /* GLCD_H_ */