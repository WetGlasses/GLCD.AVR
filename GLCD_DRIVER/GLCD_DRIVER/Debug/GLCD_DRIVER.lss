
GLCD_DRIVER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000710  00800100  000009d8  00000a6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800810  00800810  0000117c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000117c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000011ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  000011e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011fb  00000000  00000000  00001270  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000251  00000000  00000000  0000246b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007ed  00000000  00000000  000026bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000288  00000000  00000000  00002eac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000490  00000000  00000000  00003134  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000da6  00000000  00000000  000035c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  0000436a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	18 e0       	ldi	r17, 0x08	; 8
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 ed       	ldi	r30, 0xD8	; 216
  a0:	f9 e0       	ldi	r31, 0x09	; 9
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 31       	cpi	r26, 0x10	; 16
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	28 e0       	ldi	r18, 0x08	; 8
  b4:	a0 e1       	ldi	r26, 0x10	; 16
  b6:	b8 e0       	ldi	r27, 0x08	; 8
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	aa 31       	cpi	r26, 0x1A	; 26
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	54 d4       	rcall	.+2216   	; 0x96c <main>
  c4:	87 c4       	rjmp	.+2318   	; 0x9d4 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <_Z17GLCD_Send_Commandc>:
}


void GLCD_Send_Command(char command)
{
	RS_Port &= ~(1<< RS_Pin);			//	Control	
  c8:	1c 98       	cbi	0x03, 4	; 3
	WR_Port |= (1<< WR_Pin);
  ca:	1b 9a       	sbi	0x03, 3	; 3
	RD_Port |= (1<< RD_Pin);
  cc:	1a 9a       	sbi	0x03, 2	; 3
	
	Data_Port = command;
  ce:	80 93 62 00 	sts	0x0062, r24
	
	CS_Port &= ~(1<< CS_Pin);
  d2:	1e 98       	cbi	0x03, 6	; 3
	WR_Port &= ~(1<< WR_Pin);
  d4:	1b 98       	cbi	0x03, 3	; 3
	...
	asm volatile ("nop");
	asm volatile ("nop");
	asm volatile ("nop");
	asm volatile ("nop");
	
	WR_Port |= (1<< WR_Pin);
  de:	1b 9a       	sbi	0x03, 3	; 3
	CS_Port |= (1<< CS_Pin);
  e0:	1e 9a       	sbi	0x03, 6	; 3
  e2:	08 95       	ret

000000e4 <_Z15GLCD_initializev>:

void WritePattern(char Pattern[], char height, char breadth , bool invert);

void GLCD_initialize()
{
	Data_Direction = 0xFF;
  e4:	8f ef       	ldi	r24, 0xFF	; 255
  e6:	80 93 61 00 	sts	0x0061, r24
	Control_Direction = 0xFF;
  ea:	82 b9       	out	0x02, r24	; 2
	
	Reset_Port |= (1<< Reset_Pin);
  ec:	1d 9a       	sbi	0x03, 5	; 3
	Reset_Port &= ~(1<< Reset_Pin);
  ee:	1d 98       	cbi	0x03, 5	; 3
	asm volatile ("nop");
  f0:	00 00       	nop
	Reset_Port |= (1<< Reset_Pin);
  f2:	1d 9a       	sbi	0x03, 5	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f4:	8f e1       	ldi	r24, 0x1F	; 31
  f6:	9e e4       	ldi	r25, 0x4E	; 78
  f8:	01 97       	sbiw	r24, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <_Z15GLCD_initializev+0x14>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <_Z15GLCD_initializev+0x1a>
  fe:	00 00       	nop
	_delay_ms(10);
	
	GLCD_Send_Command(0xaf);            // display on
 100:	8f ea       	ldi	r24, 0xAF	; 175
 102:	e2 df       	rcall	.-60     	; 0xc8 <_Z17GLCD_Send_Commandc>
	GLCD_Send_Command(0x40);            // display start line=0
 104:	80 e4       	ldi	r24, 0x40	; 64
 106:	e0 df       	rcall	.-64     	; 0xc8 <_Z17GLCD_Send_Commandc>
	GLCD_Send_Command(0xa0);            // ADC=0
 108:	80 ea       	ldi	r24, 0xA0	; 160
 10a:	de df       	rcall	.-68     	; 0xc8 <_Z17GLCD_Send_Commandc>
	GLCD_Send_Command(0xa6);            // normal display
 10c:	86 ea       	ldi	r24, 0xA6	; 166
 10e:	dc df       	rcall	.-72     	; 0xc8 <_Z17GLCD_Send_Commandc>
	GLCD_Send_Command(0xa4);            // Duisplay all point = off
 110:	84 ea       	ldi	r24, 0xA4	; 164
 112:	da df       	rcall	.-76     	; 0xc8 <_Z17GLCD_Send_Commandc>
	GLCD_Send_Command(0xa2);            // LCD bias = 1/9
 114:	82 ea       	ldi	r24, 0xA2	; 162
 116:	d8 df       	rcall	.-80     	; 0xc8 <_Z17GLCD_Send_Commandc>
	GLCD_Send_Command(0xc8);            // Common output mode select= reverse
 118:	88 ec       	ldi	r24, 0xC8	; 200
 11a:	d6 df       	rcall	.-84     	; 0xc8 <_Z17GLCD_Send_Commandc>
	GLCD_Send_Command(0x2f);            // Power control = all on
 11c:	8f e2       	ldi	r24, 0x2F	; 47
 11e:	d4 df       	rcall	.-88     	; 0xc8 <_Z17GLCD_Send_Commandc>

	GLCD_Send_Command(0x25);			// set the Rab ratio to middle
 120:	85 e2       	ldi	r24, 0x25	; 37
 122:	d2 df       	rcall	.-92     	; 0xc8 <_Z17GLCD_Send_Commandc>
	GLCD_Send_Command(0x81);            // E-Vol setting
 124:	81 e8       	ldi	r24, 0x81	; 129
 126:	d0 df       	rcall	.-96     	; 0xc8 <_Z17GLCD_Send_Commandc>
	GLCD_Send_Command(0x20);			 // (2byte command)
 128:	80 e2       	ldi	r24, 0x20	; 32
 12a:	ce cf       	rjmp	.-100    	; 0xc8 <_Z17GLCD_Send_Commandc>
 12c:	08 95       	ret

0000012e <_Z14GLCD_Send_Datac>:
}


void GLCD_Send_Data(char data)
{
	RS_Port |= (1<< RS_Pin);			//	Control
 12e:	1c 9a       	sbi	0x03, 4	; 3
	WR_Port |= (1<< WR_Pin);
 130:	1b 9a       	sbi	0x03, 3	; 3
	RD_Port |= (1<< RD_Pin);
 132:	1a 9a       	sbi	0x03, 2	; 3
	
	Data_Port = data;
 134:	80 93 62 00 	sts	0x0062, r24
	
	CS_Port &= ~(1<< CS_Pin);
 138:	1e 98       	cbi	0x03, 6	; 3
	WR_Port &= ~(1<< WR_Pin);
 13a:	1b 98       	cbi	0x03, 3	; 3
	...
	asm volatile ("nop");
	asm volatile ("nop");
	asm volatile ("nop");
	asm volatile ("nop");
	
	WR_Port |= (1<< WR_Pin);
 144:	1b 9a       	sbi	0x03, 3	; 3
	CS_Port |= (1<< CS_Pin);
 146:	1e 9a       	sbi	0x03, 6	; 3
 148:	08 95       	ret

0000014a <_Z16GLCD_ClearScreenv>:
}
void GLCD_ClearScreen()
{
 14a:	ff 92       	push	r15
 14c:	0f 93       	push	r16
 14e:	1f 93       	push	r17
 150:	cf 93       	push	r28
 152:	df 93       	push	r29
 154:	10 e0       	ldi	r17, 0x00	; 0
	uint16_t i, j;
	for(i=0;i<8;i++)
	{
		GLCD_Send_Command(0xb0 | i);	// select page 0~7
		GLCD_Send_Command(0x10);	    // start form column 4
		GLCD_Send_Command(0x00);	    // (2byte command)
 156:	68 94       	set
 158:	ff 24       	eor	r15, r15
 15a:	f7 f8       	bld	r15, 7
 15c:	00 e0       	ldi	r16, 0x00	; 0
void GLCD_ClearScreen()
{
	uint16_t i, j;
	for(i=0;i<8;i++)
	{
		GLCD_Send_Command(0xb0 | i);	// select page 0~7
 15e:	81 2f       	mov	r24, r17
 160:	80 6b       	ori	r24, 0xB0	; 176
 162:	b2 df       	rcall	.-156    	; 0xc8 <_Z17GLCD_Send_Commandc>
		GLCD_Send_Command(0x10);	    // start form column 4
 164:	80 e1       	ldi	r24, 0x10	; 16
 166:	b0 df       	rcall	.-160    	; 0xc8 <_Z17GLCD_Send_Commandc>
		GLCD_Send_Command(0x00);	    // (2byte command)
 168:	80 e0       	ldi	r24, 0x00	; 0
 16a:	ae df       	rcall	.-164    	; 0xc8 <_Z17GLCD_Send_Commandc>
 16c:	cf 2d       	mov	r28, r15
 16e:	d0 2f       	mov	r29, r16
		for(j=0;j<128;j++)
		{
			GLCD_Send_Data(0x00);
 170:	80 e0       	ldi	r24, 0x00	; 0
 172:	dd df       	rcall	.-70     	; 0x12e <_Z14GLCD_Send_Datac>
 174:	21 97       	sbiw	r28, 0x01	; 1
	for(i=0;i<8;i++)
	{
		GLCD_Send_Command(0xb0 | i);	// select page 0~7
		GLCD_Send_Command(0x10);	    // start form column 4
		GLCD_Send_Command(0x00);	    // (2byte command)
		for(j=0;j<128;j++)
 176:	e1 f7       	brne	.-8      	; 0x170 <_Z16GLCD_ClearScreenv+0x26>
 178:	1f 5f       	subi	r17, 0xFF	; 255
	CS_Port |= (1<< CS_Pin);
}
void GLCD_ClearScreen()
{
	uint16_t i, j;
	for(i=0;i<8;i++)
 17a:	18 30       	cpi	r17, 0x08	; 8
 17c:	81 f7       	brne	.-32     	; 0x15e <_Z16GLCD_ClearScreenv+0x14>
		for(j=0;j<128;j++)
		{
			GLCD_Send_Data(0x00);
		}
	}
}
 17e:	df 91       	pop	r29
 180:	cf 91       	pop	r28
 182:	1f 91       	pop	r17
 184:	0f 91       	pop	r16
 186:	ff 90       	pop	r15
 188:	08 95       	ret

0000018a <_Z9GLCD_gotohh>:


void GLCD_goto(unsigned char page,unsigned char col)
{
 18a:	cf 93       	push	r28
 18c:	c6 2f       	mov	r28, r22
	GLCD_Send_Command(0xb0|page); //page 0
 18e:	80 6b       	ori	r24, 0xB0	; 176
 190:	9b df       	rcall	.-202    	; 0xc8 <_Z17GLCD_Send_Commandc>
	GLCD_Send_Command(0x10 | (col >> 4) );	    // start form column 4
 192:	8c 2f       	mov	r24, r28
 194:	82 95       	swap	r24
 196:	8f 70       	andi	r24, 0x0F	; 15
 198:	80 61       	ori	r24, 0x10	; 16
 19a:	96 df       	rcall	.-212    	; 0xc8 <_Z17GLCD_Send_Commandc>
	GLCD_Send_Command(0x00 | (col& 0x0F) );	    // (2byte command)
 19c:	8c 2f       	mov	r24, r28
 19e:	8f 70       	andi	r24, 0x0F	; 15
 1a0:	93 df       	rcall	.-218    	; 0xc8 <_Z17GLCD_Send_Commandc>
}
 1a2:	cf 91       	pop	r28
 1a4:	08 95       	ret

000001a6 <_Z12WritePatternPcccb>:


void WritePattern(char pattern[], char height, char breadth, bool invert)
{
 1a6:	7f 92       	push	r7
 1a8:	8f 92       	push	r8
 1aa:	9f 92       	push	r9
 1ac:	af 92       	push	r10
 1ae:	bf 92       	push	r11
 1b0:	cf 92       	push	r12
 1b2:	df 92       	push	r13
 1b4:	ef 92       	push	r14
 1b6:	ff 92       	push	r15
 1b8:	0f 93       	push	r16
 1ba:	1f 93       	push	r17
 1bc:	cf 93       	push	r28
 1be:	df 93       	push	r29
	uint16_t i, j;
	for(i=0;i<height;i++)
 1c0:	a6 2e       	mov	r10, r22
 1c2:	b1 2c       	mov	r11, r1
 1c4:	a1 14       	cp	r10, r1
 1c6:	b1 04       	cpc	r11, r1
 1c8:	61 f1       	breq	.+88     	; 0x222 <_Z12WritePatternPcccb+0x7c>
 1ca:	72 2e       	mov	r7, r18
 1cc:	c4 2e       	mov	r12, r20
 1ce:	d1 2c       	mov	r13, r1
 1d0:	e8 2e       	mov	r14, r24
 1d2:	f9 2e       	mov	r15, r25
 1d4:	00 e0       	ldi	r16, 0x00	; 0
 1d6:	10 e0       	ldi	r17, 0x00	; 0
	{
		GLCD_Send_Command(0xb0 | i);	// select page 0~7
 1d8:	80 2f       	mov	r24, r16
 1da:	80 6b       	ori	r24, 0xB0	; 176
 1dc:	75 df       	rcall	.-278    	; 0xc8 <_Z17GLCD_Send_Commandc>
		GLCD_Send_Command(0x10);	    // start form column 4
 1de:	80 e1       	ldi	r24, 0x10	; 16
 1e0:	73 df       	rcall	.-282    	; 0xc8 <_Z17GLCD_Send_Commandc>
		GLCD_Send_Command(0x00);	    // (2byte command)
 1e2:	80 e0       	ldi	r24, 0x00	; 0
 1e4:	71 df       	rcall	.-286    	; 0xc8 <_Z17GLCD_Send_Commandc>
		for(j=0;j<breadth;j++)
 1e6:	c1 14       	cp	r12, r1
 1e8:	d1 04       	cpc	r13, r1
 1ea:	a1 f0       	breq	.+40     	; 0x214 <_Z12WritePatternPcccb+0x6e>
 1ec:	e6 01       	movw	r28, r12
 1ee:	ce 0d       	add	r28, r14
 1f0:	df 1d       	adc	r29, r15
		{
			if (invert==true)
			{
				GLCD_Send_Data(~pattern[breadth*i+j]);
 1f2:	47 01       	movw	r8, r14
		GLCD_Send_Command(0xb0 | i);	// select page 0~7
		GLCD_Send_Command(0x10);	    // start form column 4
		GLCD_Send_Command(0x00);	    // (2byte command)
		for(j=0;j<breadth;j++)
		{
			if (invert==true)
 1f4:	77 20       	and	r7, r7
 1f6:	29 f0       	breq	.+10     	; 0x202 <_Z12WritePatternPcccb+0x5c>
			{
				GLCD_Send_Data(~pattern[breadth*i+j]);
 1f8:	f4 01       	movw	r30, r8
 1fa:	80 81       	ld	r24, Z
 1fc:	80 95       	com	r24
 1fe:	97 df       	rcall	.-210    	; 0x12e <_Z14GLCD_Send_Datac>
 200:	03 c0       	rjmp	.+6      	; 0x208 <_Z12WritePatternPcccb+0x62>
			}
			else
			{
				GLCD_Send_Data(pattern[breadth*i+j]);
 202:	f4 01       	movw	r30, r8
 204:	80 81       	ld	r24, Z
 206:	93 df       	rcall	.-218    	; 0x12e <_Z14GLCD_Send_Datac>
 208:	ff ef       	ldi	r31, 0xFF	; 255
 20a:	8f 1a       	sub	r8, r31
 20c:	9f 0a       	sbc	r9, r31
	for(i=0;i<height;i++)
	{
		GLCD_Send_Command(0xb0 | i);	// select page 0~7
		GLCD_Send_Command(0x10);	    // start form column 4
		GLCD_Send_Command(0x00);	    // (2byte command)
		for(j=0;j<breadth;j++)
 20e:	8c 16       	cp	r8, r28
 210:	9d 06       	cpc	r9, r29
 212:	81 f7       	brne	.-32     	; 0x1f4 <_Z12WritePatternPcccb+0x4e>


void WritePattern(char pattern[], char height, char breadth, bool invert)
{
	uint16_t i, j;
	for(i=0;i<height;i++)
 214:	0f 5f       	subi	r16, 0xFF	; 255
 216:	1f 4f       	sbci	r17, 0xFF	; 255
 218:	ec 0c       	add	r14, r12
 21a:	fd 1c       	adc	r15, r13
 21c:	0a 15       	cp	r16, r10
 21e:	1b 05       	cpc	r17, r11
 220:	d9 f6       	brne	.-74     	; 0x1d8 <_Z12WritePatternPcccb+0x32>
			{
				GLCD_Send_Data(pattern[breadth*i+j]);
			}
		}
	}
}
 222:	df 91       	pop	r29
 224:	cf 91       	pop	r28
 226:	1f 91       	pop	r17
 228:	0f 91       	pop	r16
 22a:	ff 90       	pop	r15
 22c:	ef 90       	pop	r14
 22e:	df 90       	pop	r13
 230:	cf 90       	pop	r12
 232:	bf 90       	pop	r11
 234:	af 90       	pop	r10
 236:	9f 90       	pop	r9
 238:	8f 90       	pop	r8
 23a:	7f 90       	pop	r7
 23c:	08 95       	ret

0000023e <_Z11WriteStringPccccbb>:


void WriteString(char string[], char length, char page, char column, bool invert , bool para)
{
 23e:	2f 92       	push	r2
 240:	3f 92       	push	r3
 242:	4f 92       	push	r4
 244:	5f 92       	push	r5
 246:	6f 92       	push	r6
 248:	7f 92       	push	r7
 24a:	8f 92       	push	r8
 24c:	9f 92       	push	r9
 24e:	af 92       	push	r10
 250:	bf 92       	push	r11
 252:	cf 92       	push	r12
 254:	df 92       	push	r13
 256:	ef 92       	push	r14
 258:	ff 92       	push	r15
 25a:	0f 93       	push	r16
 25c:	1f 93       	push	r17
 25e:	cf 93       	push	r28
 260:	df 93       	push	r29
 262:	00 d0       	rcall	.+0      	; 0x264 <_Z11WriteStringPccccbb+0x26>
 264:	1f 92       	push	r1
 266:	cd b7       	in	r28, 0x3d	; 61
 268:	de b7       	in	r29, 0x3e	; 62
 26a:	6c 01       	movw	r12, r24
 26c:	86 2e       	mov	r8, r22
 26e:	44 2e       	mov	r4, r20
 270:	f2 2e       	mov	r15, r18
	GLCD_goto(page,column);	
 272:	62 2f       	mov	r22, r18
 274:	84 2f       	mov	r24, r20
 276:	89 df       	rcall	.-238    	; 0x18a <_Z9GLCD_gotohh>
	char given_column = column;
	for (char x = 0;x<length;x++)
 278:	88 20       	and	r8, r8
 27a:	09 f4       	brne	.+2      	; 0x27e <_Z11WriteStringPccccbb+0x40>
 27c:	83 c0       	rjmp	.+262    	; 0x384 <_Z11WriteStringPccccbb+0x146>
 27e:	56 01       	movw	r10, r12
 280:	8a 94       	dec	r8
 282:	91 2c       	mov	r9, r1
 284:	a4 01       	movw	r20, r8
 286:	4f 5f       	subi	r20, 0xFF	; 255
 288:	5f 4f       	sbci	r21, 0xFF	; 255
 28a:	46 01       	movw	r8, r12
 28c:	84 0e       	add	r8, r20
 28e:	95 1e       	adc	r9, r21
 290:	1f 2d       	mov	r17, r15
		if (column>=120)
		{
			page++;
			if (para == false)
			{
				column=0;
 292:	51 2c       	mov	r5, r1
			} 
			else
			{
				column = given_column;
 294:	f9 82       	std	Y+1, r15	; 0x01
			GLCD_goto(page,column);
		}
		
		for (char y = 0;y<7;y++)
		{
			if ((Font[(string[x]-0x20)*7 + y] != 0x00) | (string[x]== 0x20))
 296:	33 24       	eor	r3, r3
 298:	33 94       	inc	r3
 29a:	21 2c       	mov	r2, r1
 29c:	f3 2c       	mov	r15, r3
 29e:	65 2c       	mov	r6, r5
{
	GLCD_goto(page,column);	
	char given_column = column;
	for (char x = 0;x<length;x++)
	{	
		if (column>=120)
 2a0:	18 37       	cpi	r17, 0x78	; 120
 2a2:	48 f0       	brcs	.+18     	; 0x2b6 <_Z11WriteStringPccccbb+0x78>
		{
			page++;
 2a4:	43 94       	inc	r4
			if (para == false)
 2a6:	ee 20       	and	r14, r14
 2a8:	11 f0       	breq	.+4      	; 0x2ae <_Z11WriteStringPccccbb+0x70>
			{
				column=0;
			} 
			else
			{
				column = given_column;
 2aa:	19 81       	ldd	r17, Y+1	; 0x01
 2ac:	01 c0       	rjmp	.+2      	; 0x2b0 <_Z11WriteStringPccccbb+0x72>
		if (column>=120)
		{
			page++;
			if (para == false)
			{
				column=0;
 2ae:	15 2d       	mov	r17, r5
			} 
			else
			{
				column = given_column;
			}
			GLCD_goto(page,column);
 2b0:	61 2f       	mov	r22, r17
 2b2:	84 2d       	mov	r24, r4
 2b4:	6a df       	rcall	.-300    	; 0x18a <_Z9GLCD_gotohh>
 2b6:	65 01       	movw	r12, r10
		}
		
		for (char y = 0;y<7;y++)
		{
			if ((Font[(string[x]-0x20)*7 + y] != 0x00) | (string[x]== 0x20))
 2b8:	f5 01       	movw	r30, r10
 2ba:	20 81       	ld	r18, Z
 2bc:	82 2f       	mov	r24, r18
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	80 97       	sbiw	r24, 0x20	; 32
 2c2:	fc 01       	movw	r30, r24
 2c4:	ee 0f       	add	r30, r30
 2c6:	ff 1f       	adc	r31, r31
 2c8:	ee 0f       	add	r30, r30
 2ca:	ff 1f       	adc	r31, r31
 2cc:	ee 0f       	add	r30, r30
 2ce:	ff 1f       	adc	r31, r31
 2d0:	e8 1b       	sub	r30, r24
 2d2:	f9 0b       	sbc	r31, r25
 2d4:	e0 50       	subi	r30, 0x00	; 0
 2d6:	ff 4f       	sbci	r31, 0xFF	; 255
 2d8:	80 81       	ld	r24, Z
 2da:	93 2d       	mov	r25, r3
 2dc:	81 11       	cpse	r24, r1
 2de:	01 c0       	rjmp	.+2      	; 0x2e2 <_Z11WriteStringPccccbb+0xa4>
 2e0:	95 2d       	mov	r25, r5
 2e2:	91 11       	cpse	r25, r1
 2e4:	2e c0       	rjmp	.+92     	; 0x342 <_Z11WriteStringPccccbb+0x104>
 2e6:	93 2d       	mov	r25, r3
 2e8:	20 32       	cpi	r18, 0x20	; 32
 2ea:	09 f0       	breq	.+2      	; 0x2ee <_Z11WriteStringPccccbb+0xb0>
 2ec:	95 2d       	mov	r25, r5
 2ee:	91 11       	cpse	r25, r1
 2f0:	28 c0       	rjmp	.+80     	; 0x342 <_Z11WriteStringPccccbb+0x104>
 2f2:	71 2e       	mov	r7, r17
 2f4:	35 c0       	rjmp	.+106    	; 0x360 <_Z11WriteStringPccccbb+0x122>
 2f6:	f6 01       	movw	r30, r12
 2f8:	20 81       	ld	r18, Z
 2fa:	82 2f       	mov	r24, r18
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	80 97       	sbiw	r24, 0x20	; 32
 300:	fc 01       	movw	r30, r24
 302:	ee 0f       	add	r30, r30
 304:	ff 1f       	adc	r31, r31
 306:	ee 0f       	add	r30, r30
 308:	ff 1f       	adc	r31, r31
 30a:	ee 0f       	add	r30, r30
 30c:	ff 1f       	adc	r31, r31
 30e:	e8 1b       	sub	r30, r24
 310:	f9 0b       	sbc	r31, r25
 312:	4a 81       	ldd	r20, Y+2	; 0x02
 314:	5b 81       	ldd	r21, Y+3	; 0x03
 316:	e4 0f       	add	r30, r20
 318:	f5 1f       	adc	r31, r21
 31a:	e0 50       	subi	r30, 0x00	; 0
 31c:	ff 4f       	sbci	r31, 0xFF	; 255
 31e:	80 81       	ld	r24, Z
 320:	4f 5f       	subi	r20, 0xFF	; 255
 322:	5f 4f       	sbci	r21, 0xFF	; 255
 324:	5b 83       	std	Y+3, r21	; 0x03
 326:	4a 83       	std	Y+2, r20	; 0x02
 328:	9f 2d       	mov	r25, r15
 32a:	81 11       	cpse	r24, r1
 32c:	01 c0       	rjmp	.+2      	; 0x330 <_Z11WriteStringPccccbb+0xf2>
 32e:	96 2d       	mov	r25, r6
 330:	91 11       	cpse	r25, r1
 332:	0a c0       	rjmp	.+20     	; 0x348 <_Z11WriteStringPccccbb+0x10a>
 334:	9f 2d       	mov	r25, r15
 336:	20 32       	cpi	r18, 0x20	; 32
 338:	09 f0       	breq	.+2      	; 0x33c <_Z11WriteStringPccccbb+0xfe>
 33a:	96 2d       	mov	r25, r6
 33c:	91 11       	cpse	r25, r1
 33e:	04 c0       	rjmp	.+8      	; 0x348 <_Z11WriteStringPccccbb+0x10a>
 340:	0f c0       	rjmp	.+30     	; 0x360 <_Z11WriteStringPccccbb+0x122>
 342:	51 e0       	ldi	r21, 0x01	; 1
 344:	5a 83       	std	Y+2, r21	; 0x02
 346:	2b 82       	std	Y+3, r2	; 0x03
			{
				if (invert==true)
 348:	00 23       	and	r16, r16
 34a:	19 f0       	breq	.+6      	; 0x352 <_Z11WriteStringPccccbb+0x114>
				{
					GLCD_Send_Data(~Font[(string[x]-0x20)*7 + y]);
 34c:	80 95       	com	r24
 34e:	ef de       	rcall	.-546    	; 0x12e <_Z14GLCD_Send_Datac>
 350:	01 c0       	rjmp	.+2      	; 0x354 <_Z11WriteStringPccccbb+0x116>
				}
				else
				{
					GLCD_Send_Data(Font[(string[x]-0x20)*7 + y]);
 352:	ed de       	rcall	.-550    	; 0x12e <_Z14GLCD_Send_Datac>
 354:	7a 80       	ldd	r7, Y+2	; 0x02
 356:	71 0e       	add	r7, r17
				column = given_column;
			}
			GLCD_goto(page,column);
		}
		
		for (char y = 0;y<7;y++)
 358:	8a 81       	ldd	r24, Y+2	; 0x02
 35a:	9b 81       	ldd	r25, Y+3	; 0x03
 35c:	07 97       	sbiw	r24, 0x07	; 7
 35e:	59 f6       	brne	.-106    	; 0x2f6 <_Z11WriteStringPccccbb+0xb8>
			else
			{
				break;
			}
		}
		if (invert==true)
 360:	00 23       	and	r16, r16
 362:	29 f0       	breq	.+10     	; 0x36e <_Z11WriteStringPccccbb+0x130>
		{
			GLCD_Send_Data(0xFF);
 364:	8f ef       	ldi	r24, 0xFF	; 255
 366:	e3 de       	rcall	.-570    	; 0x12e <_Z14GLCD_Send_Datac>
			column++;
 368:	11 e0       	ldi	r17, 0x01	; 1
 36a:	17 0d       	add	r17, r7
 36c:	04 c0       	rjmp	.+8      	; 0x376 <_Z11WriteStringPccccbb+0x138>
		}
		else
		{
			GLCD_Send_Data(0x00);
 36e:	85 2d       	mov	r24, r5
 370:	de de       	rcall	.-580    	; 0x12e <_Z14GLCD_Send_Datac>
			column++;
 372:	11 e0       	ldi	r17, 0x01	; 1
 374:	17 0d       	add	r17, r7
 376:	9f ef       	ldi	r25, 0xFF	; 255
 378:	a9 1a       	sub	r10, r25
 37a:	b9 0a       	sbc	r11, r25

void WriteString(char string[], char length, char page, char column, bool invert , bool para)
{
	GLCD_goto(page,column);	
	char given_column = column;
	for (char x = 0;x<length;x++)
 37c:	a8 14       	cp	r10, r8
 37e:	b9 04       	cpc	r11, r9
 380:	09 f0       	breq	.+2      	; 0x384 <_Z11WriteStringPccccbb+0x146>
 382:	8e cf       	rjmp	.-228    	; 0x2a0 <_Z11WriteStringPccccbb+0x62>
		{
			GLCD_Send_Data(0x00);
			column++;
		}
	}
}
 384:	0f 90       	pop	r0
 386:	0f 90       	pop	r0
 388:	0f 90       	pop	r0
 38a:	df 91       	pop	r29
 38c:	cf 91       	pop	r28
 38e:	1f 91       	pop	r17
 390:	0f 91       	pop	r16
 392:	ff 90       	pop	r15
 394:	ef 90       	pop	r14
 396:	df 90       	pop	r13
 398:	cf 90       	pop	r12
 39a:	bf 90       	pop	r11
 39c:	af 90       	pop	r10
 39e:	9f 90       	pop	r9
 3a0:	8f 90       	pop	r8
 3a2:	7f 90       	pop	r7
 3a4:	6f 90       	pop	r6
 3a6:	5f 90       	pop	r5
 3a8:	4f 90       	pop	r4
 3aa:	3f 90       	pop	r3
 3ac:	2f 90       	pop	r2
 3ae:	08 95       	ret

000003b0 <_Z13Write2XStringPccccbb>:

void Write2XString( char string[], char length, char page, char column, bool invert, bool para)
{
 3b0:	2f 92       	push	r2
 3b2:	3f 92       	push	r3
 3b4:	4f 92       	push	r4
 3b6:	5f 92       	push	r5
 3b8:	6f 92       	push	r6
 3ba:	7f 92       	push	r7
 3bc:	8f 92       	push	r8
 3be:	9f 92       	push	r9
 3c0:	af 92       	push	r10
 3c2:	bf 92       	push	r11
 3c4:	cf 92       	push	r12
 3c6:	df 92       	push	r13
 3c8:	ef 92       	push	r14
 3ca:	ff 92       	push	r15
 3cc:	0f 93       	push	r16
 3ce:	1f 93       	push	r17
 3d0:	cf 93       	push	r28
 3d2:	df 93       	push	r29
 3d4:	cd b7       	in	r28, 0x3d	; 61
 3d6:	de b7       	in	r29, 0x3e	; 62
 3d8:	e1 97       	sbiw	r28, 0x31	; 49
 3da:	0f b6       	in	r0, 0x3f	; 63
 3dc:	f8 94       	cli
 3de:	de bf       	out	0x3e, r29	; 62
 3e0:	0f be       	out	0x3f, r0	; 63
 3e2:	cd bf       	out	0x3d, r28	; 61
 3e4:	4f a3       	std	Y+39, r20	; 0x27
 3e6:	e8 aa       	std	Y+48, r14	; 0x30
	*/
	
	char Y, Given_column;
	Given_column= column;
	
	for (char X=0;X<length;X++)
 3e8:	66 23       	and	r22, r22
 3ea:	09 f4       	brne	.+2      	; 0x3ee <_Z13Write2XStringPccccbb+0x3e>
 3ec:	84 c1       	rjmp	.+776    	; 0x6f6 <_Z13Write2XStringPccccbb+0x346>
 3ee:	9e a3       	std	Y+38, r25	; 0x26
 3f0:	8d a3       	std	Y+37, r24	; 0x25
 3f2:	61 50       	subi	r22, 0x01	; 1
 3f4:	46 2f       	mov	r20, r22
 3f6:	50 e0       	ldi	r21, 0x00	; 0
 3f8:	4f 5f       	subi	r20, 0xFF	; 255
 3fa:	5f 4f       	sbci	r21, 0xFF	; 255
 3fc:	bc 01       	movw	r22, r24
 3fe:	64 0f       	add	r22, r20
 400:	75 1f       	adc	r23, r21
 402:	7f a7       	std	Y+47, r23	; 0x2f
 404:	6e a7       	std	Y+46, r22	; 0x2e
 406:	92 2e       	mov	r9, r18
			{
				column=0;
			}
			else
			{
				column = Given_column;
 408:	29 ab       	std	Y+49, r18	; 0x31
 40a:	ce 01       	movw	r24, r28
 40c:	01 96       	adiw	r24, 0x01	; 1
 40e:	9e 8f       	std	Y+30, r25	; 0x1e
 410:	8d 8f       	std	Y+29, r24	; 0x1d
 412:	3e 01       	movw	r6, r28
 414:	9d e1       	ldi	r25, 0x1D	; 29
 416:	69 0e       	add	r6, r25
 418:	71 1c       	adc	r7, r1
		if (column>=114)
		{
			page+=2;
			if (para == false)
			{
				column=0;
 41a:	ad 8d       	ldd	r26, Y+29	; 0x1d
 41c:	a8 a7       	std	Y+40, r26	; 0x28
 41e:	be 8d       	ldd	r27, Y+30	; 0x1e
 420:	b9 a7       	std	Y+41, r27	; 0x29
 422:	fe 01       	movw	r30, r28
 424:	70 96       	adiw	r30, 0x10	; 16
 426:	f8 a3       	std	Y+32, r31	; 0x20
 428:	ef 8f       	std	Y+31, r30	; 0x1f
 42a:	9e 01       	movw	r18, r28
 42c:	21 5f       	subi	r18, 0xF1	; 241
 42e:	3f 4f       	sbci	r19, 0xFF	; 255
 430:	3a a3       	std	Y+34, r19	; 0x22
 432:	29 a3       	std	Y+33, r18	; 0x21
 434:	69 01       	movw	r12, r18
		{
				GLCD_Send_Command(0xb0 | page);					// select page 0~7
				GLCD_Send_Command(0x10 | (column >> 4) );	    // start form column 4
				GLCD_Send_Command(0x00 | (column & 0x0F));	    // (2byte command)
				
				if ((!((Double_Font[Y] == 0x00)&(Double_Font[14+Y] == 0x00)))| (string[X]== 0x20))
 436:	31 2c       	mov	r3, r1
 438:	59 2c       	mov	r5, r9
 43a:	40 2e       	mov	r4, r16
	char Y, Given_column;
	Given_column= column;
	
	for (char X=0;X<length;X++)
	{
		if (column>=114)
 43c:	71 e7       	ldi	r23, 0x71	; 113
 43e:	75 15       	cp	r23, r5
 440:	48 f4       	brcc	.+18     	; 0x454 <_Z13Write2XStringPccccbb+0xa4>
		{
			page+=2;
 442:	8f a1       	ldd	r24, Y+39	; 0x27
 444:	8e 5f       	subi	r24, 0xFE	; 254
 446:	8f a3       	std	Y+39, r24	; 0x27
			if (para == false)
 448:	98 a9       	ldd	r25, Y+48	; 0x30
 44a:	99 23       	and	r25, r25
 44c:	11 f0       	breq	.+4      	; 0x452 <_Z13Write2XStringPccccbb+0xa2>
			{
				column=0;
			}
			else
			{
				column = Given_column;
 44e:	59 a8       	ldd	r5, Y+49	; 0x31
 450:	01 c0       	rjmp	.+2      	; 0x454 <_Z13Write2XStringPccccbb+0xa4>
		if (column>=114)
		{
			page+=2;
			if (para == false)
			{
				column=0;
 452:	51 2c       	mov	r5, r1
 454:	8e 01       	movw	r16, r28
 456:	0f 5f       	subi	r16, 0xFF	; 255
 458:	1f 4f       	sbci	r17, 0xFF	; 255
 45a:	e8 a5       	ldd	r30, Y+40	; 0x28
 45c:	f9 a5       	ldd	r31, Y+41	; 0x29
				column = Given_column;
			}
		}
		for (Y = 0;Y<28;Y++)
		{
			Double_Font[Y]=0x00;
 45e:	11 92       	st	Z+, r1
			else
			{
				column = Given_column;
			}
		}
		for (Y = 0;Y<28;Y++)
 460:	e6 15       	cp	r30, r6
 462:	f7 05       	cpc	r31, r7
 464:	e1 f7       	brne	.-8      	; 0x45e <_Z13Write2XStringPccccbb+0xae>
 466:	ad a1       	ldd	r26, Y+37	; 0x25
 468:	be a1       	ldd	r27, Y+38	; 0x26
 46a:	bc a3       	std	Y+36, r27	; 0x24
 46c:	ab a3       	std	Y+35, r26	; 0x23
			Double_Font[Y]=0x00;
		}
			
		for (Y =0; Y<7; Y++)
		{
			Double_Font[2*Y] = Font[(string[X]-0x20)*7 + Y];
 46e:	8c 91       	ld	r24, X
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	80 97       	sbiw	r24, 0x20	; 32
 474:	dc 01       	movw	r26, r24
 476:	aa 0f       	add	r26, r26
 478:	bb 1f       	adc	r27, r27
 47a:	aa 0f       	add	r26, r26
 47c:	bb 1f       	adc	r27, r27
 47e:	aa 0f       	add	r26, r26
 480:	bb 1f       	adc	r27, r27
 482:	a8 1b       	sub	r26, r24
 484:	b9 0b       	sbc	r27, r25
 486:	a0 50       	subi	r26, 0x00	; 0
 488:	bf 4f       	sbci	r27, 0xFF	; 255
 48a:	fe 01       	movw	r30, r28
 48c:	32 96       	adiw	r30, 0x02	; 2
 48e:	ad 01       	movw	r20, r26
 490:	da 01       	movw	r26, r20
 492:	8d 91       	ld	r24, X+
 494:	ad 01       	movw	r20, r26
 496:	9f 01       	movw	r18, r30
 498:	21 50       	subi	r18, 0x01	; 1
 49a:	31 09       	sbc	r19, r1
 49c:	d9 01       	movw	r26, r18
 49e:	8c 93       	st	X, r24
			Double_Font[2*Y+1] = Font[(string[X]-0x20)*7 + Y];
 4a0:	80 83       	st	Z, r24
 4a2:	32 96       	adiw	r30, 0x02	; 2
		for (Y = 0;Y<28;Y++)
		{
			Double_Font[Y]=0x00;
		}
			
		for (Y =0; Y<7; Y++)
 4a4:	2f 8d       	ldd	r18, Y+31	; 0x1f
 4a6:	38 a1       	ldd	r19, Y+32	; 0x20
 4a8:	e2 17       	cp	r30, r18
 4aa:	f3 07       	cpc	r31, r19
 4ac:	89 f7       	brne	.-30     	; 0x490 <_Z13Write2XStringPccccbb+0xe0>
 4ae:	be 01       	movw	r22, r28
 4b0:	61 5f       	subi	r22, 0xF1	; 241
 4b2:	7f 4f       	sbci	r23, 0xFF	; 255
 4b4:	5b 01       	movw	r10, r22
 4b6:	a8 a5       	ldd	r26, Y+40	; 0x28
 4b8:	b9 a5       	ldd	r27, Y+41	; 0x29
 4ba:	48 01       	movw	r8, r16
 4bc:	f6 01       	movw	r30, r12
			Double_Font[2*Y+1] = Font[(string[X]-0x20)*7 + Y];
		}
		
		for (Y =0; Y<14; Y++)
		{
			Double_Font[14+Y] = ((Double_Font[Y] & 0b10000000)) | ((Double_Font[Y] & 0b10000000)>>1) |  ((Double_Font[Y] & 0b01000000)>>1) | ((Double_Font[Y] & 0b01000000)>>2) |  ((Double_Font[Y] & 0b00100000)>>2) | ((Double_Font[Y] & 0b00100000)>>3) |  ((Double_Font[Y] & 0b00010000)>>3) | ((Double_Font[Y] & 0b00010000)>>4);
 4be:	6c 91       	ld	r22, X
 4c0:	46 2f       	mov	r20, r22
 4c2:	40 74       	andi	r20, 0x40	; 64
 4c4:	50 e0       	ldi	r21, 0x00	; 0
 4c6:	26 2f       	mov	r18, r22
 4c8:	20 72       	andi	r18, 0x20	; 32
 4ca:	30 e0       	ldi	r19, 0x00	; 0
 4cc:	86 2f       	mov	r24, r22
 4ce:	80 71       	andi	r24, 0x10	; 16
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	60 78       	andi	r22, 0x80	; 128
 4d4:	e6 2e       	mov	r14, r22
 4d6:	06 2f       	mov	r16, r22
 4d8:	10 e0       	ldi	r17, 0x00	; 0
 4da:	15 95       	asr	r17
 4dc:	07 95       	ror	r16
 4de:	ba 01       	movw	r22, r20
 4e0:	75 95       	asr	r23
 4e2:	67 95       	ror	r22
 4e4:	60 2b       	or	r22, r16
 4e6:	6e 29       	or	r22, r14
 4e8:	55 95       	asr	r21
 4ea:	47 95       	ror	r20
 4ec:	55 95       	asr	r21
 4ee:	47 95       	ror	r20
 4f0:	46 2b       	or	r20, r22
 4f2:	79 01       	movw	r14, r18
 4f4:	f5 94       	asr	r15
 4f6:	e7 94       	ror	r14
 4f8:	f5 94       	asr	r15
 4fa:	e7 94       	ror	r14
 4fc:	04 2f       	mov	r16, r20
 4fe:	0e 29       	or	r16, r14
 500:	35 95       	asr	r19
 502:	27 95       	ror	r18
 504:	35 95       	asr	r19
 506:	27 95       	ror	r18
 508:	35 95       	asr	r19
 50a:	27 95       	ror	r18
 50c:	20 2b       	or	r18, r16
 50e:	8c 01       	movw	r16, r24
 510:	15 95       	asr	r17
 512:	07 95       	ror	r16
 514:	15 95       	asr	r17
 516:	07 95       	ror	r16
 518:	15 95       	asr	r17
 51a:	07 95       	ror	r16
 51c:	02 2b       	or	r16, r18
 51e:	95 95       	asr	r25
 520:	87 95       	ror	r24
 522:	95 95       	asr	r25
 524:	87 95       	ror	r24
 526:	95 95       	asr	r25
 528:	87 95       	ror	r24
 52a:	95 95       	asr	r25
 52c:	87 95       	ror	r24
 52e:	80 2b       	or	r24, r16
 530:	81 93       	st	Z+, r24
			Double_Font[Y] = ((Double_Font[Y] & 0b00001000))<<4 | ((Double_Font[Y] & 0b00001000)<<3) |  ((Double_Font[Y] & 0b00000100)<<3) | ((Double_Font[Y] & 0b00000100)<<2) |  ((Double_Font[Y] & 0b00000010)<<2) | ((Double_Font[Y] & 0b00000010)<<1) |  ((Double_Font[Y] & 0b00000001)<<1) | ((Double_Font[Y] & 0b00000001));
 532:	1c 91       	ld	r17, X
 534:	21 2f       	mov	r18, r17
 536:	28 70       	andi	r18, 0x08	; 8
 538:	30 e0       	ldi	r19, 0x00	; 0
 53a:	41 2f       	mov	r20, r17
 53c:	44 70       	andi	r20, 0x04	; 4
 53e:	50 e0       	ldi	r21, 0x00	; 0
 540:	81 2f       	mov	r24, r17
 542:	82 70       	andi	r24, 0x02	; 2
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	b9 01       	movw	r22, r18
 548:	62 95       	swap	r22
 54a:	72 95       	swap	r23
 54c:	70 7f       	andi	r23, 0xF0	; 240
 54e:	76 27       	eor	r23, r22
 550:	60 7f       	andi	r22, 0xF0	; 240
 552:	76 27       	eor	r23, r22
 554:	22 0f       	add	r18, r18
 556:	33 1f       	adc	r19, r19
 558:	22 0f       	add	r18, r18
 55a:	33 1f       	adc	r19, r19
 55c:	22 0f       	add	r18, r18
 55e:	33 1f       	adc	r19, r19
 560:	26 2b       	or	r18, r22
 562:	31 2f       	mov	r19, r17
 564:	31 70       	andi	r19, 0x01	; 1
 566:	23 2b       	or	r18, r19
 568:	8a 01       	movw	r16, r20
 56a:	00 0f       	add	r16, r16
 56c:	11 1f       	adc	r17, r17
 56e:	00 0f       	add	r16, r16
 570:	11 1f       	adc	r17, r17
 572:	00 0f       	add	r16, r16
 574:	11 1f       	adc	r17, r17
 576:	20 2b       	or	r18, r16
 578:	44 0f       	add	r20, r20
 57a:	55 1f       	adc	r21, r21
 57c:	44 0f       	add	r20, r20
 57e:	55 1f       	adc	r21, r21
 580:	42 2b       	or	r20, r18
 582:	7c 01       	movw	r14, r24
 584:	ee 0c       	add	r14, r14
 586:	ff 1c       	adc	r15, r15
 588:	ee 0c       	add	r14, r14
 58a:	ff 1c       	adc	r15, r15
 58c:	e4 2a       	or	r14, r20
 58e:	88 0f       	add	r24, r24
 590:	99 1f       	adc	r25, r25
 592:	8e 29       	or	r24, r14
 594:	33 0f       	add	r19, r19
 596:	83 2b       	or	r24, r19
 598:	8d 93       	st	X+, r24
		{
			Double_Font[2*Y] = Font[(string[X]-0x20)*7 + Y];
			Double_Font[2*Y+1] = Font[(string[X]-0x20)*7 + Y];
		}
		
		for (Y =0; Y<14; Y++)
 59a:	ac 15       	cp	r26, r12
 59c:	bd 05       	cpc	r27, r13
 59e:	09 f0       	breq	.+2      	; 0x5a2 <_Z13Write2XStringPccccbb+0x1f2>
 5a0:	8e cf       	rjmp	.-228    	; 0x4be <_Z13Write2XStringPccccbb+0x10e>
 5a2:	84 01       	movw	r16, r8
 5a4:	0f 2e       	mov	r0, r31
 5a6:	fe e0       	ldi	r31, 0x0E	; 14
 5a8:	2f 2e       	mov	r2, r31
 5aa:	f0 2d       	mov	r31, r0
 5ac:	25 0c       	add	r2, r5
			Double_Font[Y] = ((Double_Font[Y] & 0b00001000))<<4 | ((Double_Font[Y] & 0b00001000)<<3) |  ((Double_Font[Y] & 0b00000100)<<3) | ((Double_Font[Y] & 0b00000100)<<2) |  ((Double_Font[Y] & 0b00000010)<<2) | ((Double_Font[Y] & 0b00000010)<<1) |  ((Double_Font[Y] & 0b00000001)<<1) | ((Double_Font[Y] & 0b00000001));
		}
	
		for (Y =0; Y<14; Y++)
		{
				GLCD_Send_Command(0xb0 | page);					// select page 0~7
 5ae:	7f a1       	ldd	r23, Y+39	; 0x27
 5b0:	70 6b       	ori	r23, 0xB0	; 176
					}
					
					
					/////////////////////////////	1st Line	//////////////////////////////////////////
					
					GLCD_Send_Command(0xb0 | (page+1));					// select page 0~7
 5b2:	8f a1       	ldd	r24, Y+39	; 0x27
 5b4:	8f 5f       	subi	r24, 0xFF	; 255
 5b6:	80 6b       	ori	r24, 0xB0	; 176
 5b8:	f8 2e       	mov	r15, r24
 5ba:	45 01       	movw	r8, r10
 5bc:	58 01       	movw	r10, r16
 5be:	05 2d       	mov	r16, r5
 5c0:	7b a6       	std	Y+43, r7	; 0x2b
 5c2:	6a a6       	std	Y+42, r6	; 0x2a
 5c4:	7f 2c       	mov	r7, r15
 5c6:	dd a6       	std	Y+45, r13	; 0x2d
 5c8:	cc a6       	std	Y+44, r12	; 0x2c
 5ca:	d4 2c       	mov	r13, r4
 5cc:	42 2c       	mov	r4, r2
 5ce:	57 2e       	mov	r5, r23
			Double_Font[Y] = ((Double_Font[Y] & 0b00001000))<<4 | ((Double_Font[Y] & 0b00001000)<<3) |  ((Double_Font[Y] & 0b00000100)<<3) | ((Double_Font[Y] & 0b00000100)<<2) |  ((Double_Font[Y] & 0b00000010)<<2) | ((Double_Font[Y] & 0b00000010)<<1) |  ((Double_Font[Y] & 0b00000001)<<1) | ((Double_Font[Y] & 0b00000001));
		}
	
		for (Y =0; Y<14; Y++)
		{
				GLCD_Send_Command(0xb0 | page);					// select page 0~7
 5d0:	25 2c       	mov	r2, r5
 5d2:	85 2d       	mov	r24, r5
 5d4:	79 dd       	rcall	.-1294   	; 0xc8 <_Z17GLCD_Send_Commandc>
				GLCD_Send_Command(0x10 | (column >> 4) );	    // start form column 4
 5d6:	10 2f       	mov	r17, r16
 5d8:	12 95       	swap	r17
 5da:	1f 70       	andi	r17, 0x0F	; 15
 5dc:	10 61       	ori	r17, 0x10	; 16
 5de:	81 2f       	mov	r24, r17
 5e0:	73 dd       	rcall	.-1306   	; 0xc8 <_Z17GLCD_Send_Commandc>
				GLCD_Send_Command(0x00 | (column & 0x0F));	    // (2byte command)
 5e2:	80 2f       	mov	r24, r16
 5e4:	8f 70       	andi	r24, 0x0F	; 15
 5e6:	e8 2e       	mov	r14, r24
 5e8:	6f dd       	rcall	.-1314   	; 0xc8 <_Z17GLCD_Send_Commandc>
				
				if ((!((Double_Font[Y] == 0x00)&(Double_Font[14+Y] == 0x00)))| (string[X]== 0x20))
 5ea:	d5 01       	movw	r26, r10
 5ec:	8d 91       	ld	r24, X+
 5ee:	5d 01       	movw	r10, r26
 5f0:	f4 01       	movw	r30, r8
 5f2:	f1 90       	ld	r15, Z+
 5f4:	4f 01       	movw	r8, r30
 5f6:	21 e0       	ldi	r18, 0x01	; 1
 5f8:	81 11       	cpse	r24, r1
 5fa:	01 c0       	rjmp	.+2      	; 0x5fe <_Z13Write2XStringPccccbb+0x24e>
 5fc:	23 2d       	mov	r18, r3
 5fe:	91 e0       	ldi	r25, 0x01	; 1
 600:	f1 10       	cpse	r15, r1
 602:	01 c0       	rjmp	.+2      	; 0x606 <_Z13Write2XStringPccccbb+0x256>
 604:	93 2d       	mov	r25, r3
 606:	92 2b       	or	r25, r18
 608:	49 f4       	brne	.+18     	; 0x61c <_Z13Write2XStringPccccbb+0x26c>
 60a:	91 e0       	ldi	r25, 0x01	; 1
 60c:	ab a1       	ldd	r26, Y+35	; 0x23
 60e:	bc a1       	ldd	r27, Y+36	; 0x24
 610:	2c 91       	ld	r18, X
 612:	20 32       	cpi	r18, 0x20	; 32
 614:	09 f0       	breq	.+2      	; 0x618 <_Z13Write2XStringPccccbb+0x268>
 616:	93 2d       	mov	r25, r3
 618:	99 23       	and	r25, r25
 61a:	11 f1       	breq	.+68     	; 0x660 <_Z13Write2XStringPccccbb+0x2b0>
				{
					if (invert==true)
 61c:	dd 20       	and	r13, r13
 61e:	61 f0       	breq	.+24     	; 0x638 <_Z13Write2XStringPccccbb+0x288>
					{
						GLCD_Send_Data(~Double_Font[Y]);
 620:	80 95       	com	r24
 622:	85 dd       	rcall	.-1270   	; 0x12e <_Z14GLCD_Send_Datac>
					}
					
					
					/////////////////////////////	1st Line	//////////////////////////////////////////
					
					GLCD_Send_Command(0xb0 | (page+1));					// select page 0~7
 624:	87 2d       	mov	r24, r7
 626:	50 dd       	rcall	.-1376   	; 0xc8 <_Z17GLCD_Send_Commandc>
					GLCD_Send_Command(0x10 | (column >> 4) );	    // start form column 4
 628:	81 2f       	mov	r24, r17
 62a:	4e dd       	rcall	.-1380   	; 0xc8 <_Z17GLCD_Send_Commandc>
					GLCD_Send_Command(0x00 | (column & 0x0F));	    // (2byte command)
 62c:	8e 2d       	mov	r24, r14
 62e:	4c dd       	rcall	.-1384   	; 0xc8 <_Z17GLCD_Send_Commandc>
					
					
					if (invert==true)
					{
						GLCD_Send_Data(~Double_Font[14+Y]);
 630:	8f 2d       	mov	r24, r15
 632:	80 95       	com	r24
 634:	7c dd       	rcall	.-1288   	; 0x12e <_Z14GLCD_Send_Datac>
 636:	09 c0       	rjmp	.+18     	; 0x64a <_Z13Write2XStringPccccbb+0x29a>
					{
						GLCD_Send_Data(~Double_Font[Y]);
					}
					else
					{
						GLCD_Send_Data(Double_Font[Y]);
 638:	7a dd       	rcall	.-1292   	; 0x12e <_Z14GLCD_Send_Datac>
					}
					
					
					/////////////////////////////	1st Line	//////////////////////////////////////////
					
					GLCD_Send_Command(0xb0 | (page+1));					// select page 0~7
 63a:	87 2d       	mov	r24, r7
 63c:	45 dd       	rcall	.-1398   	; 0xc8 <_Z17GLCD_Send_Commandc>
					GLCD_Send_Command(0x10 | (column >> 4) );	    // start form column 4
 63e:	81 2f       	mov	r24, r17
 640:	43 dd       	rcall	.-1402   	; 0xc8 <_Z17GLCD_Send_Commandc>
					GLCD_Send_Command(0x00 | (column & 0x0F));	    // (2byte command)
 642:	8e 2d       	mov	r24, r14
 644:	41 dd       	rcall	.-1406   	; 0xc8 <_Z17GLCD_Send_Commandc>
					{
						GLCD_Send_Data(~Double_Font[14+Y]);
					}
					else
					{
						GLCD_Send_Data(Double_Font[14+Y]);
 646:	8f 2d       	mov	r24, r15
 648:	72 dd       	rcall	.-1308   	; 0x12e <_Z14GLCD_Send_Datac>
					}
					column++;
 64a:	0f 5f       	subi	r16, 0xFF	; 255
		{
			Double_Font[14+Y] = ((Double_Font[Y] & 0b10000000)) | ((Double_Font[Y] & 0b10000000)>>1) |  ((Double_Font[Y] & 0b01000000)>>1) | ((Double_Font[Y] & 0b01000000)>>2) |  ((Double_Font[Y] & 0b00100000)>>2) | ((Double_Font[Y] & 0b00100000)>>3) |  ((Double_Font[Y] & 0b00010000)>>3) | ((Double_Font[Y] & 0b00010000)>>4);
			Double_Font[Y] = ((Double_Font[Y] & 0b00001000))<<4 | ((Double_Font[Y] & 0b00001000)<<3) |  ((Double_Font[Y] & 0b00000100)<<3) | ((Double_Font[Y] & 0b00000100)<<2) |  ((Double_Font[Y] & 0b00000010)<<2) | ((Double_Font[Y] & 0b00000010)<<1) |  ((Double_Font[Y] & 0b00000001)<<1) | ((Double_Font[Y] & 0b00000001));
		}
	
		for (Y =0; Y<14; Y++)
 64c:	04 11       	cpse	r16, r4
 64e:	c0 cf       	rjmp	.-128    	; 0x5d0 <_Z13Write2XStringPccccbb+0x220>
 650:	12 2d       	mov	r17, r2
 652:	24 2c       	mov	r2, r4
 654:	4d 2c       	mov	r4, r13
 656:	6a a4       	ldd	r6, Y+42	; 0x2a
 658:	7b a4       	ldd	r7, Y+43	; 0x2b
 65a:	cc a4       	ldd	r12, Y+44	; 0x2c
 65c:	dd a4       	ldd	r13, Y+45	; 0x2d
 65e:	07 c0       	rjmp	.+14     	; 0x66e <_Z13Write2XStringPccccbb+0x2be>
 660:	12 2d       	mov	r17, r2
 662:	4d 2c       	mov	r4, r13
 664:	6a a4       	ldd	r6, Y+42	; 0x2a
 666:	7b a4       	ldd	r7, Y+43	; 0x2b
 668:	cc a4       	ldd	r12, Y+44	; 0x2c
 66a:	dd a4       	ldd	r13, Y+45	; 0x2d
 66c:	20 2e       	mov	r2, r16
				{
					break;
				}
		}
		
		if (invert==true)
 66e:	44 20       	and	r4, r4
 670:	e1 f0       	breq	.+56     	; 0x6aa <_Z13Write2XStringPccccbb+0x2fa>
		{
			GLCD_Send_Command(0xb0 | page);					// select page 0~7
 672:	81 2f       	mov	r24, r17
 674:	29 dd       	rcall	.-1454   	; 0xc8 <_Z17GLCD_Send_Commandc>
			GLCD_Send_Command(0x10 | (column >> 4) );	    // start form column 4
 676:	12 2d       	mov	r17, r2
 678:	12 95       	swap	r17
 67a:	1f 70       	andi	r17, 0x0F	; 15
 67c:	10 61       	ori	r17, 0x10	; 16
 67e:	81 2f       	mov	r24, r17
 680:	23 dd       	rcall	.-1466   	; 0xc8 <_Z17GLCD_Send_Commandc>
			GLCD_Send_Command(0x00 | (column & 0x0F));	    // (2byte command)
 682:	02 2d       	mov	r16, r2
 684:	0f 70       	andi	r16, 0x0F	; 15
 686:	80 2f       	mov	r24, r16
 688:	1f dd       	rcall	.-1474   	; 0xc8 <_Z17GLCD_Send_Commandc>
			GLCD_Send_Data(0xFF);
 68a:	8f ef       	ldi	r24, 0xFF	; 255
 68c:	50 dd       	rcall	.-1376   	; 0x12e <_Z14GLCD_Send_Datac>
			
			GLCD_Send_Command(0xb0 | (page+1));					// select page 0~7
 68e:	8f a1       	ldd	r24, Y+39	; 0x27
 690:	8f 5f       	subi	r24, 0xFF	; 255
 692:	80 6b       	ori	r24, 0xB0	; 176
 694:	19 dd       	rcall	.-1486   	; 0xc8 <_Z17GLCD_Send_Commandc>
			GLCD_Send_Command(0x10 | (column >> 4) );	    // start form column 4
 696:	81 2f       	mov	r24, r17
 698:	17 dd       	rcall	.-1490   	; 0xc8 <_Z17GLCD_Send_Commandc>
			GLCD_Send_Command(0x00 | (column & 0x0F));	    // (2byte command)
 69a:	80 2f       	mov	r24, r16
 69c:	15 dd       	rcall	.-1494   	; 0xc8 <_Z17GLCD_Send_Commandc>
			GLCD_Send_Data(0xFF);
 69e:	8f ef       	ldi	r24, 0xFF	; 255
 6a0:	46 dd       	rcall	.-1396   	; 0x12e <_Z14GLCD_Send_Datac>
			column++;
 6a2:	55 24       	eor	r5, r5
 6a4:	53 94       	inc	r5
 6a6:	52 0c       	add	r5, r2
 6a8:	1b c0       	rjmp	.+54     	; 0x6e0 <_Z13Write2XStringPccccbb+0x330>
		}
		else
		{
			GLCD_Send_Command(0xb0 | page);					// select page 0~7
 6aa:	81 2f       	mov	r24, r17
 6ac:	0d dd       	rcall	.-1510   	; 0xc8 <_Z17GLCD_Send_Commandc>
			GLCD_Send_Command(0x10 | (column >> 4) );	    // start form column 4
 6ae:	12 2d       	mov	r17, r2
 6b0:	12 95       	swap	r17
 6b2:	1f 70       	andi	r17, 0x0F	; 15
 6b4:	10 61       	ori	r17, 0x10	; 16
 6b6:	81 2f       	mov	r24, r17
 6b8:	07 dd       	rcall	.-1522   	; 0xc8 <_Z17GLCD_Send_Commandc>
			GLCD_Send_Command(0x00 | (column & 0x0F));	    // (2byte command)
 6ba:	02 2d       	mov	r16, r2
 6bc:	0f 70       	andi	r16, 0x0F	; 15
 6be:	80 2f       	mov	r24, r16
 6c0:	03 dd       	rcall	.-1530   	; 0xc8 <_Z17GLCD_Send_Commandc>
			GLCD_Send_Data(0x00);
 6c2:	80 e0       	ldi	r24, 0x00	; 0
 6c4:	34 dd       	rcall	.-1432   	; 0x12e <_Z14GLCD_Send_Datac>
			
			GLCD_Send_Command(0xb0 | (page+1));					// select page 0~7
 6c6:	8f a1       	ldd	r24, Y+39	; 0x27
 6c8:	8f 5f       	subi	r24, 0xFF	; 255
 6ca:	80 6b       	ori	r24, 0xB0	; 176
 6cc:	fd dc       	rcall	.-1542   	; 0xc8 <_Z17GLCD_Send_Commandc>
			GLCD_Send_Command(0x10 | (column >> 4) );	    // start form column 4
 6ce:	81 2f       	mov	r24, r17
 6d0:	fb dc       	rcall	.-1546   	; 0xc8 <_Z17GLCD_Send_Commandc>
			GLCD_Send_Command(0x00 | (column & 0x0F));	    // (2byte command)
 6d2:	80 2f       	mov	r24, r16
 6d4:	f9 dc       	rcall	.-1550   	; 0xc8 <_Z17GLCD_Send_Commandc>
			GLCD_Send_Data(0x00);
 6d6:	80 e0       	ldi	r24, 0x00	; 0
 6d8:	2a dd       	rcall	.-1452   	; 0x12e <_Z14GLCD_Send_Datac>
			column++;
 6da:	55 24       	eor	r5, r5
 6dc:	53 94       	inc	r5
 6de:	52 0c       	add	r5, r2
 6e0:	ed a1       	ldd	r30, Y+37	; 0x25
 6e2:	fe a1       	ldd	r31, Y+38	; 0x26
 6e4:	31 96       	adiw	r30, 0x01	; 1
 6e6:	fe a3       	std	Y+38, r31	; 0x26
 6e8:	ed a3       	std	Y+37, r30	; 0x25
	*/
	
	char Y, Given_column;
	Given_column= column;
	
	for (char X=0;X<length;X++)
 6ea:	2e a5       	ldd	r18, Y+46	; 0x2e
 6ec:	3f a5       	ldd	r19, Y+47	; 0x2f
 6ee:	e2 17       	cp	r30, r18
 6f0:	f3 07       	cpc	r31, r19
 6f2:	09 f0       	breq	.+2      	; 0x6f6 <_Z13Write2XStringPccccbb+0x346>
 6f4:	a3 ce       	rjmp	.-698    	; 0x43c <_Z13Write2XStringPccccbb+0x8c>
			GLCD_Send_Command(0x00 | (column & 0x0F));	    // (2byte command)
			GLCD_Send_Data(0x00);
			column++;
		}
	}
}
 6f6:	e1 96       	adiw	r28, 0x31	; 49
 6f8:	0f b6       	in	r0, 0x3f	; 63
 6fa:	f8 94       	cli
 6fc:	de bf       	out	0x3e, r29	; 62
 6fe:	0f be       	out	0x3f, r0	; 63
 700:	cd bf       	out	0x3d, r28	; 61
 702:	df 91       	pop	r29
 704:	cf 91       	pop	r28
 706:	1f 91       	pop	r17
 708:	0f 91       	pop	r16
 70a:	ff 90       	pop	r15
 70c:	ef 90       	pop	r14
 70e:	df 90       	pop	r13
 710:	cf 90       	pop	r12
 712:	bf 90       	pop	r11
 714:	af 90       	pop	r10
 716:	9f 90       	pop	r9
 718:	8f 90       	pop	r8
 71a:	7f 90       	pop	r7
 71c:	6f 90       	pop	r6
 71e:	5f 90       	pop	r5
 720:	4f 90       	pop	r4
 722:	3f 90       	pop	r3
 724:	2f 90       	pop	r2
 726:	08 95       	ret

00000728 <_Z16Mifare_GLCD_initv>:
void Mifare_GLCD_Invalid_ID(char ID[]);
void Mifare_GLCD_Invalid_Time(char ID[]);

void Mifare_GLCD_init()
{
	ID_show[0] = 'I';
 728:	e0 e1       	ldi	r30, 0x10	; 16
 72a:	f8 e0       	ldi	r31, 0x08	; 8
 72c:	89 e4       	ldi	r24, 0x49	; 73
 72e:	80 83       	st	Z, r24
	ID_show[1] = 'D';
 730:	84 e4       	ldi	r24, 0x44	; 68
 732:	81 83       	std	Z+1, r24	; 0x01
	ID_show[2] = ':';
 734:	8a e3       	ldi	r24, 0x3A	; 58
 736:	82 83       	std	Z+2, r24	; 0x02
	ID_show[3] = ' ';
 738:	80 e2       	ldi	r24, 0x20	; 32
 73a:	83 83       	std	Z+3, r24	; 0x03
	
	GLCD_initialize();
 73c:	d3 dc       	rcall	.-1626   	; 0xe4 <_Z15GLCD_initializev>
	GLCD_ClearScreen();	
 73e:	05 dd       	rcall	.-1526   	; 0x14a <_Z16GLCD_ClearScreenv>
	WritePattern( ra_logo , 8, 128, false);
 740:	20 e0       	ldi	r18, 0x00	; 0
 742:	40 e8       	ldi	r20, 0x80	; 128
 744:	68 e0       	ldi	r22, 0x08	; 8
 746:	80 ea       	ldi	r24, 0xA0	; 160
 748:	93 e0       	ldi	r25, 0x03	; 3
 74a:	2d dd       	rcall	.-1446   	; 0x1a6 <_Z12WritePatternPcccb>
 74c:	2f ef       	ldi	r18, 0xFF	; 255
 74e:	83 ed       	ldi	r24, 0xD3	; 211
 750:	90 e3       	ldi	r25, 0x30	; 48
 752:	21 50       	subi	r18, 0x01	; 1
 754:	80 40       	sbci	r24, 0x00	; 0
 756:	90 40       	sbci	r25, 0x00	; 0
 758:	e1 f7       	brne	.-8      	; 0x752 <_Z16Mifare_GLCD_initv+0x2a>
 75a:	00 c0       	rjmp	.+0      	; 0x75c <_Z16Mifare_GLCD_initv+0x34>
 75c:	00 00       	nop
 75e:	08 95       	ret

00000760 <_Z26Mifare_GLCD_Access_GrantedPc>:
	_delay_ms(2000);
	
}

void Mifare_GLCD_Access_Granted(char ID[])
{
 760:	ef 92       	push	r14
 762:	0f 93       	push	r16
 764:	cf 93       	push	r28
 766:	df 93       	push	r29
 768:	ec 01       	movw	r28, r24
	GLCD_ClearScreen();
 76a:	ef dc       	rcall	.-1570   	; 0x14a <_Z16GLCD_ClearScreenv>
	WriteString("www.2ra-bd.com",14,0,23, false, false);
 76c:	e1 2c       	mov	r14, r1
 76e:	00 e0       	ldi	r16, 0x00	; 0
 770:	27 e1       	ldi	r18, 0x17	; 23
 772:	40 e0       	ldi	r20, 0x00	; 0
 774:	6e e0       	ldi	r22, 0x0E	; 14
 776:	80 ea       	ldi	r24, 0xA0	; 160
 778:	97 e0       	ldi	r25, 0x07	; 7
 77a:	61 dd       	rcall	.-1342   	; 0x23e <_Z11WriteStringPccccbb>
	Write2XString("ACCESS",6,2,22, false, false);
 77c:	26 e1       	ldi	r18, 0x16	; 22
 77e:	42 e0       	ldi	r20, 0x02	; 2
 780:	66 e0       	ldi	r22, 0x06	; 6
 782:	8f ea       	ldi	r24, 0xAF	; 175
 784:	97 e0       	ldi	r25, 0x07	; 7
 786:	14 de       	rcall	.-984    	; 0x3b0 <_Z13Write2XStringPccccbb>
	Write2XString("GRANTED",7,4,12, false, false);
 788:	2c e0       	ldi	r18, 0x0C	; 12
 78a:	44 e0       	ldi	r20, 0x04	; 4
 78c:	67 e0       	ldi	r22, 0x07	; 7
 78e:	86 eb       	ldi	r24, 0xB6	; 182
 790:	97 e0       	ldi	r25, 0x07	; 7
 792:	0e de       	rcall	.-996    	; 0x3b0 <_Z13Write2XStringPccccbb>
	WriteString("~~~~~~~~~~~~~~",14,6,12, false, false);
 794:	2c e0       	ldi	r18, 0x0C	; 12
 796:	46 e0       	ldi	r20, 0x06	; 6
 798:	6e e0       	ldi	r22, 0x0E	; 14
 79a:	8e eb       	ldi	r24, 0xBE	; 190
 79c:	97 e0       	ldi	r25, 0x07	; 7
 79e:	4f dd       	rcall	.-1378   	; 0x23e <_Z11WriteStringPccccbb>
 7a0:	fe 01       	movw	r30, r28
 7a2:	a4 e1       	ldi	r26, 0x14	; 20
 7a4:	b8 e0       	ldi	r27, 0x08	; 8
 7a6:	9e 01       	movw	r18, r28
 7a8:	2a 5f       	subi	r18, 0xFA	; 250
 7aa:	3f 4f       	sbci	r19, 0xFF	; 255
	for (char x=0;x<6;x++)
	{
		ID_show[4+x]=ID[x];
 7ac:	91 91       	ld	r25, Z+
 7ae:	9d 93       	st	X+, r25
	GLCD_ClearScreen();
	WriteString("www.2ra-bd.com",14,0,23, false, false);
	Write2XString("ACCESS",6,2,22, false, false);
	Write2XString("GRANTED",7,4,12, false, false);
	WriteString("~~~~~~~~~~~~~~",14,6,12, false, false);
	for (char x=0;x<6;x++)
 7b0:	e2 17       	cp	r30, r18
 7b2:	f3 07       	cpc	r31, r19
 7b4:	d9 f7       	brne	.-10     	; 0x7ac <_Z26Mifare_GLCD_Access_GrantedPc+0x4c>
	{
		ID_show[4+x]=ID[x];
	}
	WriteString(ID_show,10,7,32, false, false);
 7b6:	e1 2c       	mov	r14, r1
 7b8:	00 e0       	ldi	r16, 0x00	; 0
 7ba:	20 e2       	ldi	r18, 0x20	; 32
 7bc:	47 e0       	ldi	r20, 0x07	; 7
 7be:	6a e0       	ldi	r22, 0x0A	; 10
 7c0:	80 e1       	ldi	r24, 0x10	; 16
 7c2:	98 e0       	ldi	r25, 0x08	; 8
 7c4:	3c dd       	rcall	.-1416   	; 0x23e <_Z11WriteStringPccccbb>
}
 7c6:	df 91       	pop	r29
 7c8:	cf 91       	pop	r28
 7ca:	0f 91       	pop	r16
 7cc:	ef 90       	pop	r14
 7ce:	08 95       	ret

000007d0 <_Z22Mifare_GLCD_Invalid_IDPc>:
void Mifare_GLCD_Invalid_ID(char ID[])
{
 7d0:	cf 92       	push	r12
 7d2:	df 92       	push	r13
 7d4:	ef 92       	push	r14
 7d6:	0f 93       	push	r16
 7d8:	cf 93       	push	r28
 7da:	6c 01       	movw	r12, r24
	GLCD_ClearScreen();
 7dc:	b6 dc       	rcall	.-1684   	; 0x14a <_Z16GLCD_ClearScreenv>
	WriteString("www.2ra-bd.com",14,0,23, false, false);
 7de:	e1 2c       	mov	r14, r1
 7e0:	00 e0       	ldi	r16, 0x00	; 0
 7e2:	27 e1       	ldi	r18, 0x17	; 23
 7e4:	40 e0       	ldi	r20, 0x00	; 0
 7e6:	6e e0       	ldi	r22, 0x0E	; 14
 7e8:	80 ea       	ldi	r24, 0xA0	; 160
 7ea:	97 e0       	ldi	r25, 0x07	; 7
 7ec:	28 dd       	rcall	.-1456   	; 0x23e <_Z11WriteStringPccccbb>
	
	GLCD_goto(1,8);
 7ee:	68 e0       	ldi	r22, 0x08	; 8
 7f0:	81 e0       	ldi	r24, 0x01	; 1
 7f2:	cb dc       	rcall	.-1642   	; 0x18a <_Z9GLCD_gotohh>
 7f4:	cc e6       	ldi	r28, 0x6C	; 108
	for (char x = 0;x<108;x++)
	{
		GLCD_Send_Data(0b11000000);
 7f6:	80 ec       	ldi	r24, 0xC0	; 192
 7f8:	9a dc       	rcall	.-1740   	; 0x12e <_Z14GLCD_Send_Datac>
 7fa:	c1 50       	subi	r28, 0x01	; 1
{
	GLCD_ClearScreen();
	WriteString("www.2ra-bd.com",14,0,23, false, false);
	
	GLCD_goto(1,8);
	for (char x = 0;x<108;x++)
 7fc:	e1 f7       	brne	.-8      	; 0x7f6 <_Z22Mifare_GLCD_Invalid_IDPc+0x26>
	{
		GLCD_Send_Data(0b11000000);
	}
	
	Write2XString(" ACCESS ",8,2,8, true, false);
 7fe:	e1 2c       	mov	r14, r1
 800:	01 e0       	ldi	r16, 0x01	; 1
 802:	28 e0       	ldi	r18, 0x08	; 8
 804:	42 e0       	ldi	r20, 0x02	; 2
 806:	68 e0       	ldi	r22, 0x08	; 8
 808:	8d ec       	ldi	r24, 0xCD	; 205
 80a:	97 e0       	ldi	r25, 0x07	; 7
 80c:	d1 dd       	rcall	.-1118   	; 0x3b0 <_Z13Write2XStringPccccbb>
	Write2XString(" DENIED ",8,4,8, true, false);
 80e:	28 e0       	ldi	r18, 0x08	; 8
 810:	44 e0       	ldi	r20, 0x04	; 4
 812:	68 e0       	ldi	r22, 0x08	; 8
 814:	86 ed       	ldi	r24, 0xD6	; 214
 816:	97 e0       	ldi	r25, 0x07	; 7
 818:	cb dd       	rcall	.-1130   	; 0x3b0 <_Z13Write2XStringPccccbb>
	GLCD_goto(6,8);
 81a:	68 e0       	ldi	r22, 0x08	; 8
 81c:	86 e0       	ldi	r24, 0x06	; 6
 81e:	b5 dc       	rcall	.-1686   	; 0x18a <_Z9GLCD_gotohh>
 820:	cc e6       	ldi	r28, 0x6C	; 108
	for (char x = 8;x<116;x++)
	{
		GLCD_Send_Data(0xFF);
 822:	8f ef       	ldi	r24, 0xFF	; 255
 824:	84 dc       	rcall	.-1784   	; 0x12e <_Z14GLCD_Send_Datac>
 826:	c1 50       	subi	r28, 0x01	; 1
	}
	
	Write2XString(" ACCESS ",8,2,8, true, false);
	Write2XString(" DENIED ",8,4,8, true, false);
	GLCD_goto(6,8);
	for (char x = 8;x<116;x++)
 828:	e1 f7       	brne	.-8      	; 0x822 <_Z22Mifare_GLCD_Invalid_IDPc+0x52>
	{
		GLCD_Send_Data(0xFF);
	}
	WriteString("INVALID ID",10,6,29, true, false);
 82a:	e1 2c       	mov	r14, r1
 82c:	01 e0       	ldi	r16, 0x01	; 1
 82e:	2d e1       	ldi	r18, 0x1D	; 29
 830:	46 e0       	ldi	r20, 0x06	; 6
 832:	6a e0       	ldi	r22, 0x0A	; 10
 834:	8f ed       	ldi	r24, 0xDF	; 223
 836:	97 e0       	ldi	r25, 0x07	; 7
 838:	02 dd       	rcall	.-1532   	; 0x23e <_Z11WriteStringPccccbb>
	GLCD_goto(7,8);
 83a:	68 e0       	ldi	r22, 0x08	; 8
 83c:	87 e0       	ldi	r24, 0x07	; 7
 83e:	a5 dc       	rcall	.-1718   	; 0x18a <_Z9GLCD_gotohh>
 840:	cc e6       	ldi	r28, 0x6C	; 108
	for (char x = 0;x<108;x++)
	{
		GLCD_Send_Data(0xFF);
 842:	8f ef       	ldi	r24, 0xFF	; 255
 844:	74 dc       	rcall	.-1816   	; 0x12e <_Z14GLCD_Send_Datac>
 846:	c1 50       	subi	r28, 0x01	; 1
	{
		GLCD_Send_Data(0xFF);
	}
	WriteString("INVALID ID",10,6,29, true, false);
	GLCD_goto(7,8);
	for (char x = 0;x<108;x++)
 848:	e1 f7       	brne	.-8      	; 0x842 <_Z22Mifare_GLCD_Invalid_IDPc+0x72>
 84a:	f6 01       	movw	r30, r12
 84c:	a4 e1       	ldi	r26, 0x14	; 20
 84e:	b8 e0       	ldi	r27, 0x08	; 8
 850:	96 01       	movw	r18, r12
 852:	2a 5f       	subi	r18, 0xFA	; 250
 854:	3f 4f       	sbci	r19, 0xFF	; 255
	{
		GLCD_Send_Data(0xFF);
	}
	for (char x=0;x<6;x++)
	{
		ID_show[4+x]=ID[x];
 856:	91 91       	ld	r25, Z+
 858:	9d 93       	st	X+, r25
	GLCD_goto(7,8);
	for (char x = 0;x<108;x++)
	{
		GLCD_Send_Data(0xFF);
	}
	for (char x=0;x<6;x++)
 85a:	e2 17       	cp	r30, r18
 85c:	f3 07       	cpc	r31, r19
 85e:	d9 f7       	brne	.-10     	; 0x856 <_Z22Mifare_GLCD_Invalid_IDPc+0x86>
	{
		ID_show[4+x]=ID[x];
	}
	WriteString(ID_show,10,7,32, true, false);
 860:	e1 2c       	mov	r14, r1
 862:	01 e0       	ldi	r16, 0x01	; 1
 864:	20 e2       	ldi	r18, 0x20	; 32
 866:	47 e0       	ldi	r20, 0x07	; 7
 868:	6a e0       	ldi	r22, 0x0A	; 10
 86a:	80 e1       	ldi	r24, 0x10	; 16
 86c:	98 e0       	ldi	r25, 0x08	; 8
 86e:	e7 dc       	rcall	.-1586   	; 0x23e <_Z11WriteStringPccccbb>
}
 870:	cf 91       	pop	r28
 872:	0f 91       	pop	r16
 874:	ef 90       	pop	r14
 876:	df 90       	pop	r13
 878:	cf 90       	pop	r12
 87a:	08 95       	ret

0000087c <_Z24Mifare_GLCD_Invalid_TimePc>:
void Mifare_GLCD_Invalid_Time(char ID[])
{
 87c:	cf 92       	push	r12
 87e:	df 92       	push	r13
 880:	ef 92       	push	r14
 882:	0f 93       	push	r16
 884:	cf 93       	push	r28
 886:	6c 01       	movw	r12, r24
	GLCD_ClearScreen();
 888:	60 dc       	rcall	.-1856   	; 0x14a <_Z16GLCD_ClearScreenv>
	WriteString("www.2ra-bd.com",14,0,23, false, false);
 88a:	e1 2c       	mov	r14, r1
 88c:	00 e0       	ldi	r16, 0x00	; 0
 88e:	27 e1       	ldi	r18, 0x17	; 23
 890:	40 e0       	ldi	r20, 0x00	; 0
 892:	6e e0       	ldi	r22, 0x0E	; 14
 894:	80 ea       	ldi	r24, 0xA0	; 160
 896:	97 e0       	ldi	r25, 0x07	; 7
 898:	d2 dc       	rcall	.-1628   	; 0x23e <_Z11WriteStringPccccbb>
	
	GLCD_goto(1,8);
 89a:	68 e0       	ldi	r22, 0x08	; 8
 89c:	81 e0       	ldi	r24, 0x01	; 1
 89e:	75 dc       	rcall	.-1814   	; 0x18a <_Z9GLCD_gotohh>
 8a0:	cc e6       	ldi	r28, 0x6C	; 108
	for (char x = 0;x<108;x++)
	{
		GLCD_Send_Data(0b11000000);
 8a2:	80 ec       	ldi	r24, 0xC0	; 192
 8a4:	44 dc       	rcall	.-1912   	; 0x12e <_Z14GLCD_Send_Datac>
 8a6:	c1 50       	subi	r28, 0x01	; 1
{
	GLCD_ClearScreen();
	WriteString("www.2ra-bd.com",14,0,23, false, false);
	
	GLCD_goto(1,8);
	for (char x = 0;x<108;x++)
 8a8:	e1 f7       	brne	.-8      	; 0x8a2 <_Z24Mifare_GLCD_Invalid_TimePc+0x26>
	{
		GLCD_Send_Data(0b11000000);
	}
	
	Write2XString(" ACCESS ",8,2,8, true, false);
 8aa:	e1 2c       	mov	r14, r1
 8ac:	01 e0       	ldi	r16, 0x01	; 1
 8ae:	28 e0       	ldi	r18, 0x08	; 8
 8b0:	42 e0       	ldi	r20, 0x02	; 2
 8b2:	68 e0       	ldi	r22, 0x08	; 8
 8b4:	8d ec       	ldi	r24, 0xCD	; 205
 8b6:	97 e0       	ldi	r25, 0x07	; 7
 8b8:	7b dd       	rcall	.-1290   	; 0x3b0 <_Z13Write2XStringPccccbb>
	Write2XString(" DENIED ",8,4,8, true, false);
 8ba:	28 e0       	ldi	r18, 0x08	; 8
 8bc:	44 e0       	ldi	r20, 0x04	; 4
 8be:	68 e0       	ldi	r22, 0x08	; 8
 8c0:	86 ed       	ldi	r24, 0xD6	; 214
 8c2:	97 e0       	ldi	r25, 0x07	; 7
 8c4:	75 dd       	rcall	.-1302   	; 0x3b0 <_Z13Write2XStringPccccbb>
	GLCD_goto(6,8);
 8c6:	68 e0       	ldi	r22, 0x08	; 8
 8c8:	86 e0       	ldi	r24, 0x06	; 6
 8ca:	5f dc       	rcall	.-1858   	; 0x18a <_Z9GLCD_gotohh>
 8cc:	cc e6       	ldi	r28, 0x6C	; 108
	for (char x = 8;x<116;x++)
	{
		GLCD_Send_Data(0xFF);
 8ce:	8f ef       	ldi	r24, 0xFF	; 255
 8d0:	2e dc       	rcall	.-1956   	; 0x12e <_Z14GLCD_Send_Datac>
 8d2:	c1 50       	subi	r28, 0x01	; 1
	}
	
	Write2XString(" ACCESS ",8,2,8, true, false);
	Write2XString(" DENIED ",8,4,8, true, false);
	GLCD_goto(6,8);
	for (char x = 8;x<116;x++)
 8d4:	e1 f7       	brne	.-8      	; 0x8ce <_Z24Mifare_GLCD_Invalid_TimePc+0x52>
	{
		GLCD_Send_Data(0xFF);
	}
	WriteString("INVALID TIME",12,6,22, true, false);
 8d6:	e1 2c       	mov	r14, r1
 8d8:	01 e0       	ldi	r16, 0x01	; 1
 8da:	26 e1       	ldi	r18, 0x16	; 22
 8dc:	46 e0       	ldi	r20, 0x06	; 6
 8de:	6c e0       	ldi	r22, 0x0C	; 12
 8e0:	8a ee       	ldi	r24, 0xEA	; 234
 8e2:	97 e0       	ldi	r25, 0x07	; 7
 8e4:	ac dc       	rcall	.-1704   	; 0x23e <_Z11WriteStringPccccbb>
	GLCD_goto(7,8);
 8e6:	68 e0       	ldi	r22, 0x08	; 8
 8e8:	87 e0       	ldi	r24, 0x07	; 7
 8ea:	4f dc       	rcall	.-1890   	; 0x18a <_Z9GLCD_gotohh>
 8ec:	cc e6       	ldi	r28, 0x6C	; 108
	for (char x = 8;x<116;x++)
	{
		GLCD_Send_Data(0xFF);
 8ee:	8f ef       	ldi	r24, 0xFF	; 255
 8f0:	1e dc       	rcall	.-1988   	; 0x12e <_Z14GLCD_Send_Datac>
 8f2:	c1 50       	subi	r28, 0x01	; 1
	{
		GLCD_Send_Data(0xFF);
	}
	WriteString("INVALID TIME",12,6,22, true, false);
	GLCD_goto(7,8);
	for (char x = 8;x<116;x++)
 8f4:	e1 f7       	brne	.-8      	; 0x8ee <_Z24Mifare_GLCD_Invalid_TimePc+0x72>
 8f6:	f6 01       	movw	r30, r12
 8f8:	a4 e1       	ldi	r26, 0x14	; 20
 8fa:	b8 e0       	ldi	r27, 0x08	; 8
 8fc:	96 01       	movw	r18, r12
 8fe:	2a 5f       	subi	r18, 0xFA	; 250
 900:	3f 4f       	sbci	r19, 0xFF	; 255
	{
		GLCD_Send_Data(0xFF);
	}
	for (char x=0;x<6;x++)
	{
		ID_show[4+x]=ID[x];
 902:	91 91       	ld	r25, Z+
 904:	9d 93       	st	X+, r25
	GLCD_goto(7,8);
	for (char x = 8;x<116;x++)
	{
		GLCD_Send_Data(0xFF);
	}
	for (char x=0;x<6;x++)
 906:	e2 17       	cp	r30, r18
 908:	f3 07       	cpc	r31, r19
 90a:	d9 f7       	brne	.-10     	; 0x902 <_Z24Mifare_GLCD_Invalid_TimePc+0x86>
	{
		ID_show[4+x]=ID[x];
	}
	WriteString(ID_show,10,7,32, true, false);
 90c:	e1 2c       	mov	r14, r1
 90e:	01 e0       	ldi	r16, 0x01	; 1
 910:	20 e2       	ldi	r18, 0x20	; 32
 912:	47 e0       	ldi	r20, 0x07	; 7
 914:	6a e0       	ldi	r22, 0x0A	; 10
 916:	80 e1       	ldi	r24, 0x10	; 16
 918:	98 e0       	ldi	r25, 0x08	; 8
 91a:	91 dc       	rcall	.-1758   	; 0x23e <_Z11WriteStringPccccbb>
}
 91c:	cf 91       	pop	r28
 91e:	0f 91       	pop	r16
 920:	ef 90       	pop	r14
 922:	df 90       	pop	r13
 924:	cf 90       	pop	r12
 926:	08 95       	ret

00000928 <_Z16Mifare_GLCD_IdlePcS_>:
void Mifare_GLCD_Idle(char date[], char time[])
{
 928:	cf 92       	push	r12
 92a:	df 92       	push	r13
 92c:	ef 92       	push	r14
 92e:	0f 93       	push	r16
 930:	cf 93       	push	r28
 932:	df 93       	push	r29
 934:	6c 01       	movw	r12, r24
 936:	eb 01       	movw	r28, r22
	GLCD_ClearScreen();
 938:	08 dc       	rcall	.-2032   	; 0x14a <_Z16GLCD_ClearScreenv>
	WriteString("www.2ra-bd.com",14,0,23, false, false);
 93a:	e1 2c       	mov	r14, r1
 93c:	00 e0       	ldi	r16, 0x00	; 0
 93e:	27 e1       	ldi	r18, 0x17	; 23
 940:	40 e0       	ldi	r20, 0x00	; 0
 942:	6e e0       	ldi	r22, 0x0E	; 14
 944:	80 ea       	ldi	r24, 0xA0	; 160
 946:	97 e0       	ldi	r25, 0x07	; 7
 948:	7a dc       	rcall	.-1804   	; 0x23e <_Z11WriteStringPccccbb>
	WriteString(date,8,2,44, false, false);
 94a:	2c e2       	ldi	r18, 0x2C	; 44
 94c:	42 e0       	ldi	r20, 0x02	; 2
 94e:	68 e0       	ldi	r22, 0x08	; 8
 950:	c6 01       	movw	r24, r12
 952:	75 dc       	rcall	.-1814   	; 0x23e <_Z11WriteStringPccccbb>
	Write2XString(time,8,4,32, false, false);
 954:	20 e2       	ldi	r18, 0x20	; 32
 956:	44 e0       	ldi	r20, 0x04	; 4
 958:	68 e0       	ldi	r22, 0x08	; 8
 95a:	ce 01       	movw	r24, r28
 95c:	29 dd       	rcall	.-1454   	; 0x3b0 <_Z13Write2XStringPccccbb>
}
 95e:	df 91       	pop	r29
 960:	cf 91       	pop	r28
 962:	0f 91       	pop	r16
 964:	ef 90       	pop	r14
 966:	df 90       	pop	r13
 968:	cf 90       	pop	r12
 96a:	08 95       	ret

0000096c <main>:
#include "MIFARE_GLCD.h"


int main(void)
{
	Mifare_GLCD_init();
 96c:	dd de       	rcall	.-582    	; 0x728 <_Z16Mifare_GLCD_initv>

    while (1) 
    {
		
		Mifare_GLCD_Idle("11/08/16","03:56:17");
 96e:	67 ef       	ldi	r22, 0xF7	; 247
 970:	77 e0       	ldi	r23, 0x07	; 7
 972:	80 e0       	ldi	r24, 0x00	; 0
 974:	98 e0       	ldi	r25, 0x08	; 8
 976:	d8 df       	rcall	.-80     	; 0x928 <_Z16Mifare_GLCD_IdlePcS_>
 978:	2f ef       	ldi	r18, 0xFF	; 255
 97a:	83 ed       	ldi	r24, 0xD3	; 211
 97c:	90 e3       	ldi	r25, 0x30	; 48
 97e:	21 50       	subi	r18, 0x01	; 1
 980:	80 40       	sbci	r24, 0x00	; 0
 982:	90 40       	sbci	r25, 0x00	; 0
 984:	e1 f7       	brne	.-8      	; 0x97e <main+0x12>
 986:	00 c0       	rjmp	.+0      	; 0x988 <main+0x1c>
 988:	00 00       	nop
		_delay_ms(2000);
		
		Mifare_GLCD_Invalid_ID("0A3F9D");
 98a:	89 e0       	ldi	r24, 0x09	; 9
 98c:	98 e0       	ldi	r25, 0x08	; 8
 98e:	20 df       	rcall	.-448    	; 0x7d0 <_Z22Mifare_GLCD_Invalid_IDPc>
 990:	2f ef       	ldi	r18, 0xFF	; 255
 992:	81 e1       	ldi	r24, 0x11	; 17
 994:	9a e7       	ldi	r25, 0x7A	; 122
 996:	21 50       	subi	r18, 0x01	; 1
 998:	80 40       	sbci	r24, 0x00	; 0
 99a:	90 40       	sbci	r25, 0x00	; 0
 99c:	e1 f7       	brne	.-8      	; 0x996 <main+0x2a>
 99e:	00 c0       	rjmp	.+0      	; 0x9a0 <main+0x34>
 9a0:	00 00       	nop
		_delay_ms(5000);
		
		Mifare_GLCD_Access_Granted("0A3F9D");
 9a2:	89 e0       	ldi	r24, 0x09	; 9
 9a4:	98 e0       	ldi	r25, 0x08	; 8
 9a6:	dc de       	rcall	.-584    	; 0x760 <_Z26Mifare_GLCD_Access_GrantedPc>
 9a8:	2f ef       	ldi	r18, 0xFF	; 255
 9aa:	81 e1       	ldi	r24, 0x11	; 17
 9ac:	9a e7       	ldi	r25, 0x7A	; 122
 9ae:	21 50       	subi	r18, 0x01	; 1
 9b0:	80 40       	sbci	r24, 0x00	; 0
 9b2:	90 40       	sbci	r25, 0x00	; 0
 9b4:	e1 f7       	brne	.-8      	; 0x9ae <main+0x42>
 9b6:	00 c0       	rjmp	.+0      	; 0x9b8 <main+0x4c>
 9b8:	00 00       	nop
		_delay_ms(5000);
		
		Mifare_GLCD_Invalid_Time("0A3F9D");
 9ba:	89 e0       	ldi	r24, 0x09	; 9
 9bc:	98 e0       	ldi	r25, 0x08	; 8
 9be:	5e df       	rcall	.-324    	; 0x87c <_Z24Mifare_GLCD_Invalid_TimePc>
 9c0:	2f ef       	ldi	r18, 0xFF	; 255
 9c2:	81 e1       	ldi	r24, 0x11	; 17
 9c4:	9a e7       	ldi	r25, 0x7A	; 122
 9c6:	21 50       	subi	r18, 0x01	; 1
 9c8:	80 40       	sbci	r24, 0x00	; 0
 9ca:	90 40       	sbci	r25, 0x00	; 0
 9cc:	e1 f7       	brne	.-8      	; 0x9c6 <main+0x5a>
 9ce:	00 c0       	rjmp	.+0      	; 0x9d0 <main+0x64>
 9d0:	00 00       	nop
 9d2:	cd cf       	rjmp	.-102    	; 0x96e <main+0x2>

000009d4 <_exit>:
 9d4:	f8 94       	cli

000009d6 <__stop_program>:
 9d6:	ff cf       	rjmp	.-2      	; 0x9d6 <__stop_program>
